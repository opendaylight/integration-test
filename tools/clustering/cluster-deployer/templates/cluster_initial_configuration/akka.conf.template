
odl-cluster-data {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]

    actor {

      provider = "akka.cluster.ClusterActorRefProvider"
      serializers {
                java = "akka.serialization.JavaSerializer"
                proto = "akka.remote.serialization.ProtobufSerializer"
              }

              serialization-bindings {
                  "com.google.protobuf.Message" = proto

              }

      default-dispatcher {
        # Setting throughput to 1 makes the dispatcher fair. It processes 1 message from
        # the mailbox before moving on to the next mailbox
        throughput = 1
      }

      default-mailbox {
        # When not using a BalancingDispatcher it is recommended that we use the SingleConsumerOnlyUnboundedMailbox
        # as it is the most efficient for multiple producer/single consumer use cases
        mailbox-type="akka.dispatch.SingleConsumerOnlyUnboundedMailbox"
      }
    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "{{HOST}}"
        port = 2550
        maximum-frame-size = 419430400
        send-buffer-size = 52428800
        receive-buffer-size = 52428800
      }
    }

    cluster {
      seed-nodes = {{{DS_SEED_NODES}}}

      auto-down-unreachable-after = 30s

      roles = [
        "{{MEMBER_NAME}}"
      ]

    }
  }
}

odl-cluster-rpc {
  bounded-mailbox {
    mailbox-type = "org.opendaylight.controller.cluster.common.actor.MeteredBoundedMailbox"
    mailbox-capacity = 1000
    mailbox-push-timeout-time = 100ms
  }

  metric-capture-enabled = true

  akka {
    loglevel = "INFO"
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    log-dead-letters = 10000

    actor {
      provider = "akka.cluster.ClusterActorRefProvider"

    }
    remote {
      log-remote-lifecycle-events = off
      netty.tcp {
        hostname = "{{HOST}}"
        port = 2551
        maximum-frame-size = 419430400
        send-buffer-size = 52428800
        receive-buffer-size = 52428800
      }
    }

    cluster {
      seed-nodes = {{{RPC_SEED_NODES}}}

      auto-down-unreachable-after = 30s
    }
  }
}
