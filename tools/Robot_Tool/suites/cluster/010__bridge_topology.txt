*** Settings ***
Documentation     Introducing switches to both the controllers C1  and C2
Suite Teardown    Delete All Sessions
Library           SSHLibrary
Library           Collections
Library           RequestsLibrary
Library           ../../libraries/Common.py
Variables         ../../variables/Variables.py

*** Variables ***
${node1}   "00:00:00:00:00:00:00:01"
${node2}   "00:00:00:00:00:00:00:02"
${node3}   "00:00:00:00:00:00:00:03"
${REST_CONTEXT}    /controller/nb/v2/topology
${REST_CONTEXT_ST}    /controller/nb/v2/statistics
${CONTROLLER1}    10.125.136.38:6633
${CONTROLLER2}    10.125.136.43:6633
${Controller1_IP}    10.125.136.38
${Controller2_IP}    10.125.136.43
${CTRL_USER}      odluser
${FLOW}           "10.0.0.1"

*** Test Cases ***
Switches are introduced to both the controllers C1 & C2
    [Documentation]    Switches are introduced to both the controllers C1 & C2
    [Tags]    Set-Bridges
    Switch Connection    1
    ${stdout1}=    Execute Command    sudo ovs-vsctl set-controller s1 tcp:${CONTROLLER1} tcp:${CONTROLLER2}
    ${stdout2}=    Execute Command    sudo ovs-vsctl set-controller s2 tcp:${CONTROLLER1} tcp:${CONTROLLER2}
    ${stdout2}=    Execute Command    sudo ovs-vsctl set-controller s3 tcp:${CONTROLLER1} tcp:${CONTROLLER2}
    ${stdout}=    Execute Command   sudo ovs-vsctl show
    Should Contain X Times    ${stdout}    Controller "tcp:${CONTROLLER1}"  3
    Should Contain X Times    ${stdout}    Controller "tcp:${CONTROLLER2}"  3
    ${stdout}=    Execute Command   sudo ovs-vsctl get-controller "s1"
    Should Contain     ${stdout}    ${CONTROLLER1}
    Should Contain     ${stdout}    ${CONTROLLER2}
    ${stdout}=    Execute Command   sudo ovs-vsctl get-controller "s2"
    Should Contain     ${stdout}    ${CONTROLLER1}
    Should Contain     ${stdout}    ${CONTROLLER2}
    ${stdout}=    Execute Command   sudo ovs-vsctl get-controller "s3"
    Should Contain     ${stdout}    ${CONTROLLER1}
    Should Contain     ${stdout}    ${CONTROLLER2}


Verifying the topology in C1
    [Documentation]    Get Topology for C1 and validate the result.
    [Tags]    get
    Create Session    session    http://${Controller1_IP}:8080   headers=${HEADERS}    auth=${auth}
    ${resp}    Get    session    ${REST_CONTEXT}/${CONTAINER}
    Sleep    10
    Should Be Equal As Strings    ${resp.status_code}    200 
    Log    ${resp.content}
    Should Contain X Times  ${resp.content}   ${node1}   4
    Should Contain X Times  ${resp.content}   ${node2}   2
    Should Contain X Times  ${resp.content}   ${node3}   2

Verifying the topology in C2
    [Documentation]    Get Topology for C2 and validate the result.
    [Tags]    get
    Create Session    session    http://${Controller2_IP}:8080   headers=${HEADERS}    auth=${auth}
    ${resp}    Get    session    ${REST_CONTEXT}/${CONTAINER}
    Sleep    10
    Should Be Equal As Strings    ${resp.status_code}    200 
    Log    ${resp.content}
    Should Contain X Times  ${resp.content}   ${node1}   4
    Should Contain X Times  ${resp.content}   ${node2}   2
    Should Contain X Times  ${resp.content}   ${node3}   2

