{
  "comments": [
    {
      "key": {
        "uuid": "3a79b1b5_7824e4ae",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 2046
      },
      "writtenOn": "2015-09-08T18:10:37Z",
      "side": 1,
      "message": "Can the result of previous test case be stored to a suite variable, so that this test case can pass even more quickly?",
      "range": {
        "startLine": 45,
        "startChar": 12,
        "endLine": 45,
        "endChar": 39
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_9861c03b",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 2264
      },
      "writtenOn": "2015-09-09T22:54:18Z",
      "side": 1,
      "message": "looking more closely at these two test cases, they should be one single case right?  Is there value in failing the first case because netconf connector is not quite ready only to see the next case pass after 1-2 iterations of the WUKS?  why not just a single test case doing the WUKS?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 79
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_0011b204",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 2046
      },
      "writtenOn": "2015-09-10T09:28:47Z",
      "side": 1,
      "message": "\u003e Is there value in failing the first case\n\nYes, there is. There are three possible netconf-connector behaviors with respect to suites relying on it: It is up quickly (suites always pass), it is very slow or it even does not start at all (suites always fail), or it has medium slowness of start (suites pass or fail depending on order and duration).\n\nWe want to detect any of the three behaviors, especially the third one. (I am not sure 60 second is the correct boundary between third and second behavior, but that can be tweaked later if we see a bug hitting that.)",
      "parentUuid": "3a79b1b5_9861c03b",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 79
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_9aba0922",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 2264
      },
      "writtenOn": "2015-09-14T23:29:51Z",
      "side": 1,
      "message": "I don\u0027t follow this logic.  If netconf-connector responds in 60s or less the #2 test case will always pass.  If it responds immediately #1 and #2 will always pass.  What are we learning by throwing a failure in the #1 test case because the netconf-connector took 2s to come up.  that gives us a failure and then a passing case.  Are we going to file a bug on that?\n\nI can see this sounding false alarms and we want to get to a point where we expect 100% passing for all stable tests/features.",
      "parentUuid": "3a79b1b5_0011b204",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 45,
        "endChar": 79
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_1814d042",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2046
      },
      "writtenOn": "2015-09-08T17:57:07Z",
      "side": 1,
      "message": "What about extending URI to point at the controller-config module itself. Json of modules as a whole is quite large.",
      "range": {
        "startLine": 61,
        "startChar": 164,
        "endLine": 61,
        "endChar": 178
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_14d330d7",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2877
      },
      "writtenOn": "2015-09-11T13:32:11Z",
      "side": 1,
      "message": "I need help determining the exact URL to be used? I tried \"restconf/config/network-topology:network-topology/topology/topology-netconf/node/controller-config/yang-ext:mount/config:modules/module/controller-config\" but got only \"{\"errors\":{\"error\":[{\"error-type\":\"protocol\",\"error-tag\":\"data-missing\",\"error-message\":\"Missing key for list \\\"module\\\".\"}]}}\". So now I am hopelessly lost regarding \"how to extend the URI to point at the controller-config module itself\". Consulting the YANG models in controller did not help either: Grepping for \"controller-config\" returned nothing and grepping for \"controller\" returned only a bunch of matches in namespace names and another bunch of matches in Java class names. However I found one thing that seems relevant: \"config.yang\":138 mentions \"container modules\" so it appears to be adding the \"controller-config\" module there, the only problem is that according to the model it seems to me that the name of the module is determined by the feature itself. Searching the JSON of the entire module list indeed found a node with \"name\": \"controller-config\" but as I showed above, I have no idea how to single it out in the URL. To me the design of these URL links seems to break \"the rule of least surprise\" (at least from my point of view).",
      "parentUuid": "3a79b1b5_1814d042",
      "range": {
        "startLine": 61,
        "startChar": 164,
        "endLine": 61,
        "endChar": 178
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_aab0d443",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2046
      },
      "writtenOn": "2015-09-14T09:51:22Z",
      "side": 1,
      "message": "\u003e I need help determining the exact URL to be used?\n\nHave you seen line 143 of opendaylight/config/config-api/src/main/yang/config.yang in controller repository?\nURI has to specify both keys (type first, with prefix of course).",
      "parentUuid": "3a79b1b5_14d330d7",
      "range": {
        "startLine": 61,
        "startChar": 164,
        "endLine": 61,
        "endChar": 178
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a79b1b5_dd6f18c4",
        "filename": "csit/suites/netconf/ready/netconfready.robot",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 2877
      },
      "writtenOn": "2015-09-14T12:42:54Z",
      "side": 1,
      "message": "I got it. See revision 4. I hope the \"controller-config\" module is always there, though.",
      "parentUuid": "3a79b1b5_aab0d443",
      "range": {
        "startLine": 61,
        "startChar": 164,
        "endLine": 61,
        "endChar": 178
      },
      "revId": "bce87655f499d4a222000befb01a27749c884ffa",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}