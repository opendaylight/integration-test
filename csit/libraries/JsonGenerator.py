import json
import subprocess
from pyangbind.lib.serialise import pybindJSONEncoder # Assuming pyangbind is there

def get_yang_file(project, path, branch):
    """ Get the yang file"""
    ## TODO: Implementation

def get_yang_files(yangfiles):
    """ Get the yang files in ./yang_modules directory """
    ## TODO: Implementation

def get_yang_file_path(yang_file):
    """ Get the yang file path in the directory """
    return './yang_modules/' + yang_file '.yang'

def get_pyang_file_path(pyang_file):
    """ Get the pyangbind generated file path in the directory """
    return './pyangbind_classes/' + pyang_file

def get_pyangbind_class(yang_file, pyang_file):
    """Get the pyangbind classes of the yang_file in ./pyangbind_classes folder"""

    plugindir = '/usr/local/lib/python2.7/dist-packages/pyangbind/plugin'
    yang_file_path = get_yang_file_path(yang_file)
    pyang_file_path = get_pyang_file_path(pyang_file)

    try:
        pro = subprocess.Popen(
        ['pyang', '--plugindir', plugindir, '-f', 'pybind', yang_file_path, '-o' , pyang_file_path],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        out, err = pro.communicate()
        if pro.returncode != 0:
            print("E: Curl failed %s with error code %d! ")
            return False
    except OSError:
        print("E: Curl failed %s!")
        return False
    return True

def get_eid_json(eid_string, vni=None):
    """Returns an EID object based its string representation"""

    yang_file = 'ietf-lisp-address-types' # yang file
    #dependent yang files
    dep_yang_file = ['ietf-lisp-address-types', 'ietf-inet-types.yang', 'ietf-yang-types']
    pyang_file = 'eid_bindings.py' #python class name to be generated by pyangbind

    if not get_yang_files(dep_yang_file): # call the get_yang_module function
        return json.dumps('{}')
    if not get_pyangbind_class(yang_file, pyang_file): # call the convert_yang_module to pyang_bind_python class function
        return json.dumps('{}')

    # then import the class
    from pyangbind_classes.eid_bindings import ietf_lisp_address_types # underscore separated 

    laddr_obj = ietf_lisp_address_types()

    if vni:
        laddr_obj.eid.virtual_network_id = vni

    eid_string = eid_string.split(':')
    prefix, text = eid_string[0], eid_string[1]
    if prefix:
        if prefix == 'srcdst':
            laddr_obj.eid.address_type = 'laddr:source-dest-key-lcaf'
            text = text.split('|')
            laddr_obj.eid.source_dest_key.source = text[0]
            laddr_obj.eid.source_dest_key.dest = text[1]
        elif prefix == 'no':
            laddr_obj.eid.address_type = 'laddr:no-address-afi'
        #else:
        ## TODO: Implementation

    # else: Instance Id case, [223] 192.0.2.0/24
    ## TODO: Implementation

    return json.dumps(laddr_obj.get(filter=True), cls=pybindJSONEncoder, indent=4)

