<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20180614 14:15:35.301" generator="Robot 3.0.4 (Python 2.7.5 on linux2)">
   <suite id="s1" name="openflowplugin-perf-bulkomatic.txt">
      <suite source="/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/suites/openflowplugin/Performance_Bulkomatic/100K_Flows_100DPN_1Node_Perf_Test.robot" id="s1-s1" name="100K Flows 100DPN 1Node Perf Test">
         <kw type="setup" name="ClusterManagement_Setup" library="ClusterManagement">
            <doc>Detect repeated call, or detect number of members and initialize derived suite variables.</doc>
            <kw name="Get Variable Value" library="BuiltIn">
               <doc>Returns variable value or ``default`` if the variable does not exist.</doc>
               <arguments>
                  <arg>\${ClusterManagement__has_setup_run}</arg>
                  <arg>False</arg>
               </arguments>
               <assign>
                  <var>${already_done}</var>
               </assign>
               <msg timestamp="20180614 14:15:36.470" level="INFO">${already_done} = False</msg>
               <status status="PASS" endtime="20180614 14:15:36.470" starttime="20180614 14:15:36.463" />
            </kw>
            <kw name="Return From Keyword If" library="BuiltIn">
               <doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
               <arguments>
                  <arg>${already_done}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:15:36.470" starttime="20180614 14:15:36.470" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>\${ClusterManagement__has_setup_run}</arg>
                  <arg>True</arg>
               </arguments>
               <msg timestamp="20180614 14:15:36.471" level="INFO">${ClusterManagement__has_setup_run} = True</msg>
               <status status="PASS" endtime="20180614 14:15:36.471" starttime="20180614 14:15:36.471" />
            </kw>
            <kw name="Get Variable Value" library="BuiltIn">
               <doc>Returns variable value or ``default`` if the variable does not exist.</doc>
               <arguments>
                  <arg>\${NUM_ODL_SYSTEM}</arg>
                  <arg>1</arg>
               </arguments>
               <assign>
                  <var>${cluster_size}</var>
               </assign>
               <msg timestamp="20180614 14:15:36.472" level="INFO">${cluster_size} = 1</msg>
               <status status="PASS" endtime="20180614 14:15:36.472" starttime="20180614 14:15:36.472" />
            </kw>
            <kw name="Run Keyword And Ignore Error" library="BuiltIn">
               <doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
               <arguments>
                  <arg>BuiltIn.Convert_To_Integer</arg>
                  <arg>${cluster_size}</arg>
               </arguments>
               <assign>
                  <var>${status}</var>
                  <var>${possibly_int_of_members}</var>
               </assign>
               <kw name="Convert To Integer" library="BuiltIn">
                  <doc>Converts the given item to an integer number.</doc>
                  <arguments>
                     <arg>${cluster_size}</arg>
                  </arguments>
                  <status status="PASS" endtime="20180614 14:15:36.473" starttime="20180614 14:15:36.473" />
               </kw>
               <msg timestamp="20180614 14:15:36.473" level="INFO">${status} = PASS</msg>
               <msg timestamp="20180614 14:15:36.473" level="INFO">${possibly_int_of_members} = 1</msg>
               <status status="PASS" endtime="20180614 14:15:36.474" starttime="20180614 14:15:36.472" />
            </kw>
            <kw name="Set Variable If" library="BuiltIn">
               <doc>Sets variable based on the given condition.</doc>
               <arguments>
                  <arg>'${status}' != 'PASS'</arg>
                  <arg>${1}</arg>
                  <arg>${possibly_int_of_members}</arg>
               </arguments>
               <assign>
                  <var>${int_of_members}</var>
               </assign>
               <msg timestamp="20180614 14:15:36.474" level="INFO">${int_of_members} = 1</msg>
               <status status="PASS" endtime="20180614 14:15:36.474" starttime="20180614 14:15:36.474" />
            </kw>
            <kw name="ClusterManagement__Compute_Derived_Variables" library="ClusterManagement">
               <doc>Construct index list, session list and IP mapping, publish them as suite variables.</doc>
               <arguments>
                  <arg>int_of_members=${int_of_members}</arg>
                  <arg>http_timeout=${http_timeout}</arg>
                  <arg>http_retries=${http_retries}</arg>
               </arguments>
               <kw name="Create List" library="BuiltIn">
                  <doc>Returns a list containing given items.</doc>
                  <assign>
                     <var>@{member_index_list}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:36.476" level="INFO">@{member_index_list} = [ ]</msg>
                  <status status="PASS" endtime="20180614 14:15:36.476" starttime="20180614 14:15:36.476" />
               </kw>
               <kw name="Create List" library="BuiltIn">
                  <doc>Returns a list containing given items.</doc>
                  <assign>
                     <var>@{session_list}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:36.477" level="INFO">@{session_list} = [ ]</msg>
                  <status status="PASS" endtime="20180614 14:15:36.477" starttime="20180614 14:15:36.476" />
               </kw>
               <kw name="Create Dictionary" library="BuiltIn">
                  <doc>Creates and returns a dictionary based on the given ``items``.</doc>
                  <assign>
                     <var>&amp;{index_to_ip_mapping}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:36.479" level="INFO">&amp;{index_to_ip_mapping} = { }</msg>
                  <status status="PASS" endtime="20180614 14:15:36.479" starttime="20180614 14:15:36.477" />
               </kw>
               <kw type="for" name="${index} IN RANGE [ 1 | ${int_of_members+1} ]">
                  <kw type="foritem" name="${index} = 1">
                     <kw name="ClusterManagement__Include_Member_Index" library="ClusterManagement">
                        <doc>Add a corresponding item based on index into the last three arguments.</doc>
                        <arguments>
                           <arg>${index}</arg>
                           <arg>${member_index_list}</arg>
                           <arg>${session_list}</arg>
                           <arg>${index_to_ip_mapping}</arg>
                           <arg>http_timeout=${http_timeout}</arg>
                           <arg>http_retries=${http_retries}</arg>
                        </arguments>
                        <kw name="Append To List" library="Collections">
                           <doc>Adds ``values`` to the end of ``list``.</doc>
                           <arguments>
                              <arg>${member_index_list}</arg>
                              <arg>${index}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:15:36.482" starttime="20180614 14:15:36.481" />
                        </kw>
                        <kw name="Set Variable" library="BuiltIn">
                           <doc>Returns the given values which can then be assigned to a variables.</doc>
                           <arguments>
                              <arg>${ODL_SYSTEM_${index}_IP}</arg>
                           </arguments>
                           <assign>
                              <var>${member_ip}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:36.482" level="INFO">${member_ip} = 10.30.170.13</msg>
                           <status status="PASS" endtime="20180614 14:15:36.482" starttime="20180614 14:15:36.482" />
                        </kw>
                        <kw name="Set To Dictionary" library="Collections">
                           <doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
                           <arguments>
                              <arg>${index_to_ip_mapping}</arg>
                              <arg>${index}</arg>
                              <arg>${member_ip}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:15:36.483" starttime="20180614 14:15:36.483" />
                        </kw>
                        <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                           <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                           <arguments>
                              <arg>member_index=${index}</arg>
                           </arguments>
                           <assign>
                              <var>${session_alias}</var>
                           </assign>
                           <kw name="Set Variable" library="BuiltIn">
                              <doc>Returns the given values which can then be assigned to a variables.</doc>
                              <arguments>
                                 <arg>ClusterManagement__session_${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:36.485" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:36.485" starttime="20180614 14:15:36.484" />
                           </kw>
                           <msg timestamp="20180614 14:15:36.485" level="INFO">${session_alias} = ClusterManagement__session_1</msg>
                           <status status="PASS" endtime="20180614 14:15:36.485" starttime="20180614 14:15:36.483" />
                        </kw>
                        <kw name="Create Session" library="RequestsLibrary">
                           <doc>Create Session: create a HTTP session to a server</doc>
                           <arguments>
                              <arg>${session_alias}</arg>
                              <arg>http://${member_ip}:${RESTCONFPORT}</arg>
                              <arg>auth=${AUTH}</arg>
                              <arg>timeout=${http_timeout}</arg>
                              <arg>max_retries=${http_retries}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:36.486" level="INFO">Creating Session using : alias=ClusterManagement__session_1, url=http://10.30.170.13:8181, headers={},                     cookies=None, auth=&lt;requests.auth.HTTPBasicAuth object at 0x7f78f7494c90&gt;, timeout=5, proxies=None, verify=False,                     debug=0</msg>
                           <status status="PASS" endtime="20180614 14:15:36.487" starttime="20180614 14:15:36.485" />
                        </kw>
                        <kw name="Append To List" library="Collections">
                           <doc>Adds ``values`` to the end of ``list``.</doc>
                           <arguments>
                              <arg>${session_list}</arg>
                              <arg>${session_alias}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:15:36.487" starttime="20180614 14:15:36.487" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:15:36.487" starttime="20180614 14:15:36.480" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:36.488" starttime="20180614 14:15:36.480" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:36.488" starttime="20180614 14:15:36.479" />
               </kw>
               <kw name="Set Suite Variable" library="BuiltIn">
                  <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
                  <arguments>
                     <arg>\${ClusterManagement__member_index_list}</arg>
                     <arg>${member_index_list}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:36.488" level="INFO">${ClusterManagement__member_index_list} = [1]</msg>
                  <status status="PASS" endtime="20180614 14:15:36.488" starttime="20180614 14:15:36.488" />
               </kw>
               <kw name="Set Suite Variable" library="BuiltIn">
                  <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
                  <arguments>
                     <arg>\${ClusterManagement__index_to_ip_mapping}</arg>
                     <arg>${index_to_ip_mapping}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:36.489" level="INFO">${ClusterManagement__index_to_ip_mapping} = {1: u'10.30.170.13'}</msg>
                  <status status="PASS" endtime="20180614 14:15:36.489" starttime="20180614 14:15:36.489" />
               </kw>
               <kw name="Set Suite Variable" library="BuiltIn">
                  <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
                  <arguments>
                     <arg>\${ClusterManagement__session_list}</arg>
                     <arg>${session_list}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:36.490" level="INFO">${ClusterManagement__session_list} = [u'ClusterManagement__session_1']</msg>
                  <status status="PASS" endtime="20180614 14:15:36.490" starttime="20180614 14:15:36.490" />
               </kw>
               <status status="PASS" endtime="20180614 14:15:36.490" starttime="20180614 14:15:36.475" />
            </kw>
            <status status="PASS" endtime="20180614 14:15:36.490" starttime="20180614 14:15:36.462" />
         </kw>
         <test id="s1-s1-t1" name="Initialize Variables">
            <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
               <doc>Runs the specified keyword and retries if it fails.</doc>
               <arguments>
                  <arg>3x</arg>
                  <arg>3s</arg>
                  <arg>ClusterManagement.Run_Karaf_Command_On_List_Or_All</arg>
                  <arg>${karaf_log_level}</arg>
               </arguments>
               <kw name="Run_Karaf_Command_On_List_Or_All" library="ClusterManagement">
                  <doc>Cycle through indices (or all), run karaf command on each.</doc>
                  <arguments>
                     <arg>${karaf_log_level}</arg>
                  </arguments>
                  <kw name="List_Indices_Or_All" library="ClusterManagement">
                     <doc>Utility to allow ${EMPTY} as default argument value, as the internal list is computed at runtime.</doc>
                     <arguments>
                        <arg>given_list=${member_index_list}</arg>
                     </arguments>
                     <assign>
                        <var>${index_list}</var>
                     </assign>
                     <kw name="Set Variable If" library="BuiltIn">
                        <doc>Sets variable based on the given condition.</doc>
                        <arguments>
                           <arg>"""${given_list}""" != ""</arg>
                           <arg>${given_list}</arg>
                           <arg>${ClusterManagement__member_index_list}</arg>
                        </arguments>
                        <assign>
                           <var>${return_list_reference}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:36.495" level="INFO">${return_list_reference} = [1]</msg>
                        <status status="PASS" endtime="20180614 14:15:36.495" starttime="20180614 14:15:36.494" />
                     </kw>
                     <kw name="Create List" library="BuiltIn">
                        <doc>Returns a list containing given items.</doc>
                        <arguments>
                           <arg>@{return_list_reference}</arg>
                        </arguments>
                        <assign>
                           <var>${return_list_copy}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:36.495" level="INFO">${return_list_copy} = [1]</msg>
                        <status status="PASS" endtime="20180614 14:15:36.495" starttime="20180614 14:15:36.495" />
                     </kw>
                     <msg timestamp="20180614 14:15:36.496" level="INFO">${index_list} = [1]</msg>
                     <status status="PASS" endtime="20180614 14:15:36.496" starttime="20180614 14:15:36.493" />
                  </kw>
                  <kw type="for" name="${index} IN [ @{index_list} ]">
                     <kw type="foritem" name="${index} = 1">
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>dictionary=${ClusterManagement__index_to_ip_mapping}</arg>
                              <arg>key=${index}</arg>
                           </arguments>
                           <assign>
                              <var>${member_ip}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:36.497" level="INFO">${member_ip} = 10.30.170.13</msg>
                           <status status="PASS" endtime="20180614 14:15:36.497" starttime="20180614 14:15:36.496" />
                        </kw>
                        <kw name="Safe_Issue_Command_On_Karaf_Console" library="KarafKeywords">
                           <doc>Run Issue_Command_On_Karaf_Console but restore previous connection afterwards.</doc>
                           <arguments>
                              <arg>${command}</arg>
                              <arg>${member_ip}</arg>
                              <arg>timeout=${timeout}</arg>
                           </arguments>
                           <kw name="Run Keyword And Return" library="BuiltIn">
                              <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                              <arguments>
                                 <arg>SSHKeywords.Run_Keyword_Preserve_Connection</arg>
                                 <arg>Issue_Command_On_Karaf_Console</arg>
                                 <arg>${cmd}</arg>
                                 <arg>${controller}</arg>
                                 <arg>${karaf_port}</arg>
                                 <arg>${timeout}</arg>
                                 <arg>${loglevel}</arg>
                              </arguments>
                              <kw name="Run_Keyword_Preserve_Connection" library="SSHKeywords">
                                 <doc>Store current connection index, run keyword returning its result, restore connection in teardown.</doc>
                                 <arguments>
                                    <arg>Issue_Command_On_Karaf_Console</arg>
                                    <arg>${cmd}</arg>
                                    <arg>${controller}</arg>
                                    <arg>${karaf_port}</arg>
                                    <arg>${timeout}</arg>
                                    <arg>${loglevel}</arg>
                                 </arguments>
                                 <kw name="Get Connection" library="SSHLibrary">
                                    <doc>Returns information about the connection.</doc>
                                    <assign>
                                       <var>${current_connection}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:36.501" level="INFO">index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                                    <msg timestamp="20180614 14:15:36.501" level="INFO">${current_connection} = index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                                    <status status="PASS" endtime="20180614 14:15:36.501" starttime="20180614 14:15:36.500" />
                                 </kw>
                                 <kw name="Run Keyword And Return" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${keyword_name}</arg>
                                       <arg>@{args}</arg>
                                       <arg>&amp;{kwargs}</arg>
                                    </arguments>
                                    <kw name="Issue_Command_On_Karaf_Console" library="KarafKeywords">
                                       <doc>Will execute the given ${cmd} by ssh'ing to the karaf console running on 10.30.170.13</doc>
                                       <arguments>
                                          <arg>@{args}</arg>
                                          <arg>&amp;{kwargs}</arg>
                                       </arguments>
                                       <kw name="Open Connection" library="SSHLibrary">
                                          <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                                          <arguments>
                                             <arg>${controller}</arg>
                                             <arg>port=${karaf_port}</arg>
                                             <arg>prompt=${KARAF_PROMPT_LOGIN}</arg>
                                             <arg>timeout=${timeout}</arg>
                                          </arguments>
                                          <status status="PASS" endtime="20180614 14:15:36.509" starttime="20180614 14:15:36.509" />
                                       </kw>
                                       <kw name="Login" library="SSHLibrary">
                                          <doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
                                          <arguments>
                                             <arg>${KARAF_USER}</arg>
                                             <arg>${KARAF_PASSWORD}</arg>
                                             <arg>loglevel=${loglevel}</arg>
                                          </arguments>
                                          <msg timestamp="20180614 14:15:36.510" level="INFO">Logging into '10.30.170.13:8101' as 'karaf'.</msg>
                                          <msg timestamp="20180614 14:15:38.712" level="INFO">Read output: [33m                                                                                           
[33m    ________                       ________                .__  .__       .__     __       
[33m    \_____  \ ______   ____   ____ \______ \ _____  ___.__.|  | |__| ____ |  |___/  |_     
[33m     /   |   \____ \_/ __ \ /    \ |    |  \__  \&lt;   |  ||  | |  |/ ___\|  |  \   __\    
[33m    /    |    \  |_&gt; &gt;  ___/|   |  \|    `   \/ __ \___  ||  |_|  / /_/  &gt;   Y  \  |      
[33m    \_______  /   __/ \___  &gt;___|  /_______  (____  / ____||____/__\___  /|___|  /__|      
[33m            \/|__|        \/     \/        \/     \/\/            /_____/      \/          
[33m                                                                                           

Hit '[1m&lt;tab&gt;[0m' for a list of available commands
and '[1m[cmd] --help[0m' for help on a specific command.
Hit '[1m&lt;ctrl-d&gt;[0m' or type '[1msystem:shutdown[0m' or '[1mlogout[0m' to shutdown OpenDaylight.

[?1h=[?2004hopendaylight-user</msg>
                                          <status status="PASS" endtime="20180614 14:15:38.712" starttime="20180614 14:15:36.510" />
                                       </kw>
                                       <kw name="Write" library="SSHLibrary">
                                          <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                                          <arguments>
                                             <arg>${cmd}</arg>
                                          </arguments>
                                          <msg timestamp="20180614 14:15:38.768" level="INFO">@root&gt;log:set WARN</msg>
                                          <status status="PASS" endtime="20180614 14:15:38.768" starttime="20180614 14:15:38.713" />
                                       </kw>
                                       <kw name="Read Until Regexp" library="SSHLibrary">
                                          <doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
                                          <arguments>
                                             <arg>${KARAF_PROMPT}</arg>
                                          </arguments>
                                          <assign>
                                             <var>${output}</var>
                                          </assign>
                                          <msg timestamp="20180614 14:15:38.772" level="INFO">[?1l&gt;[?2004l[?1h=[?2004hopendaylight-user@root&gt;</msg>
                                          <msg timestamp="20180614 14:15:38.772" level="INFO">${output} = [?1l&gt;[?2004l[?1h=[?2004hopendaylight-user@root&gt;</msg>
                                          <status status="PASS" endtime="20180614 14:15:38.772" starttime="20180614 14:15:38.769" />
                                       </kw>
                                       <kw name="Write" library="SSHLibrary">
                                          <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                                          <arguments>
                                             <arg>logout</arg>
                                          </arguments>
                                          <msg timestamp="20180614 14:15:38.821" level="INFO">logout</msg>
                                          <status status="PASS" endtime="20180614 14:15:38.821" starttime="20180614 14:15:38.772" />
                                       </kw>
                                       <kw name="Close Connection" library="SSHLibrary">
                                          <doc>Closes the current connection.</doc>
                                          <status status="PASS" endtime="20180614 14:15:38.824" starttime="20180614 14:15:38.822" />
                                       </kw>
                                       <kw name="Log" library="BuiltIn">
                                          <doc>Logs the given message with the given level.</doc>
                                          <arguments>
                                             <arg>${output}</arg>
                                          </arguments>
                                          <msg timestamp="20180614 14:15:38.824" level="INFO">[?1l&gt;[?2004l[?1h=[?2004hopendaylight-user@root&gt;</msg>
                                          <status status="PASS" endtime="20180614 14:15:38.824" starttime="20180614 14:15:38.824" />
                                       </kw>
                                       <status status="PASS" endtime="20180614 14:15:38.825" starttime="20180614 14:15:36.508" />
                                    </kw>
                                    <msg timestamp="20180614 14:15:38.825" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:38.825" starttime="20180614 14:15:36.501" />
                                 </kw>
                                 <kw type="teardown" name="Restore_Current_Ssh_Connection_From_Index" library="SSHKeywords">
                                    <doc>Restore active SSH connection in SSHLibrary to given index.</doc>
                                    <arguments>
                                       <arg>${current_connection.index}</arg>
                                    </arguments>
                                    <kw name="Run Keyword And Return If" library="BuiltIn">
                                       <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                       <arguments>
                                          <arg>${connection_index} is not None</arg>
                                          <arg>SSHLibrary.Switch Connection</arg>
                                          <arg>${connection_index}</arg>
                                       </arguments>
                                       <status status="PASS" endtime="20180614 14:15:38.827" starttime="20180614 14:15:38.826" />
                                    </kw>
                                    <kw name="Open Connection" library="SSHLibrary">
                                       <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                                       <arguments>
                                          <arg>127.0.0.1</arg>
                                       </arguments>
                                       <status status="PASS" endtime="20180614 14:15:38.828" starttime="20180614 14:15:38.827" />
                                    </kw>
                                    <kw name="Close Connection" library="SSHLibrary">
                                       <doc>Closes the current connection.</doc>
                                       <status status="PASS" endtime="20180614 14:15:38.828" starttime="20180614 14:15:38.828" />
                                    </kw>
                                    <status status="PASS" endtime="20180614 14:15:38.828" starttime="20180614 14:15:38.826" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:38.828" starttime="20180614 14:15:36.499" />
                              </kw>
                              <msg timestamp="20180614 14:15:38.828" level="INFO">Returning from the enclosing user keyword.</msg>
                              <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.498" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.497" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.496" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.496" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.492" />
               </kw>
               <status status="PASS" endtime="20180614 14:15:38.829" starttime="20180614 14:15:36.492" />
            </kw>
            <kw name="Evaluate" library="BuiltIn">
               <doc>Evaluates the given expression in Python and returns the results.</doc>
               <arguments>
                  <arg>${flow_count_per_switch} * ${switch_count}</arg>
               </arguments>
               <assign>
                  <var>${flow_count_after_add}</var>
               </assign>
               <msg timestamp="20180614 14:15:38.830" level="INFO">${flow_count_after_add} = 100000</msg>
               <status status="PASS" endtime="20180614 14:15:38.830" starttime="20180614 14:15:38.829" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${flow_count_after_add}</arg>
               </arguments>
               <msg timestamp="20180614 14:15:38.831" level="INFO">${flow_count_after_add} = 100000</msg>
               <status status="PASS" endtime="20180614 14:15:38.831" starttime="20180614 14:15:38.830" />
            </kw>
            <kw name="Set DPN And Flow Count In Json Add" library="BulkomaticKeywords">
               <doc>Set new DPN count and flows count per DPN in the Bulkomatic Add json file.</doc>
               <arguments>
                  <arg>${orig_json_config_add}</arg>
                  <arg>${switch_count}</arg>
                  <arg>${flow_count_per_switch}</arg>
               </arguments>
               <assign>
                  <var>${temp_json_config_add}</var>
               </assign>
               <kw name="Get File" library="OperatingSystem">
                  <doc>Returns the contents of a specified file.</doc>
                  <arguments>
                     <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/../variables/openflowplugin/${json_config}</arg>
                  </arguments>
                  <assign>
                     <var>${body}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.832" html="yes" level="INFO">Getting file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_add_bulk_flow_config.json"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_add_bulk_flow_config.json&lt;/a&gt;'.</msg>
                  <msg timestamp="20180614 14:15:38.833" level="INFO">${body} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "1",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true",...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.833" starttime="20180614 14:15:38.832" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "1"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.833" level="INFO">${get_string} = "sal-bulk-flow:dpn-count" : "1"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.834" starttime="20180614 14:15:38.833" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "${dpn_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.834" level="INFO">${put_string} = "sal-bulk-flow:dpn-count" : "32"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.834" starttime="20180614 14:15:38.834" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${body}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${str}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.836" level="INFO">${str} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true"...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.836" starttime="20180614 14:15:38.835" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "1000"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.837" level="INFO">${get_string} = "sal-bulk-flow:flows-per-dpn" : "1000"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.837" starttime="20180614 14:15:38.836" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "${flows_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.837" level="INFO">${put_string} = "sal-bulk-flow:flows-per-dpn" : "3125"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.838" starttime="20180614 14:15:38.837" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${str}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${json_body_add}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.839" level="INFO">${json_body_add} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true"...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.839" starttime="20180614 14:15:38.838" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:batch-size" : "1"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.839" level="INFO">${get_string} = "sal-bulk-flow:batch-size" : "1"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.839" starttime="20180614 14:15:38.839" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:batch-size" : "${flows_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.840" level="INFO">${put_string} = "sal-bulk-flow:batch-size" : "3125"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.840" starttime="20180614 14:15:38.840" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${json_body_add}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${json_body_add}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.841" level="INFO">${json_body_add} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "tr...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.841" starttime="20180614 14:15:38.841" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>${json_body_add}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:38.842" level="INFO">{
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "true",
   "sal-bulk-flow:tx-chain" : "true",
   "sal-bulk-flow:sleep-for" : "0",
   "sal-bulk-flow:sleep-after" : "1",
   "sal-bulk-flow:start-table-id" : "0",
   "sal-bulk-flow:end-table-id" : "1"
  }
}</msg>
                  <status status="PASS" endtime="20180614 14:15:38.842" starttime="20180614 14:15:38.842" />
               </kw>
               <msg timestamp="20180614 14:15:38.842" level="INFO">${temp_json_config_add} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "tr...</msg>
               <status status="PASS" endtime="20180614 14:15:38.842" starttime="20180614 14:15:38.831" />
            </kw>
            <kw name="Set DPN And Flow Count In Json Get" library="BulkomaticKeywords">
               <doc>Set new DPN count and flows count per DPN in the Bulkomatic Get json file.</doc>
               <arguments>
                  <arg>${orig_json_config_get}</arg>
                  <arg>${switch_count}</arg>
                  <arg>${flow_count_after_add}</arg>
               </arguments>
               <assign>
                  <var>${temp_json_config_get}</var>
               </assign>
               <kw name="Get File" library="OperatingSystem">
                  <doc>Returns the contents of a specified file.</doc>
                  <arguments>
                     <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/../variables/openflowplugin/${json_config}</arg>
                  </arguments>
                  <assign>
                     <var>${body}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.844" html="yes" level="INFO">Getting file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_get_bulk_flow_config.json"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_get_bulk_flow_config.json&lt;/a&gt;'.</msg>
                  <msg timestamp="20180614 14:15:38.844" level="INFO">${body} = {
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "1",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:start-t...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.844" starttime="20180614 14:15:38.844" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "1"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.845" level="INFO">${get_string} = "sal-bulk-flow:dpn-count" : "1"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.845" starttime="20180614 14:15:38.845" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "${dpn_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.846" level="INFO">${put_string} = "sal-bulk-flow:dpn-count" : "32"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.846" starttime="20180614 14:15:38.846" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${body}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${str}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.847" level="INFO">${str} = {
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:start-...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.847" starttime="20180614 14:15:38.846" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "1000"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.847" level="INFO">${get_string} = "sal-bulk-flow:flows-per-dpn" : "1000"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.848" starttime="20180614 14:15:38.847" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "${flows_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.848" level="INFO">${put_string} = "sal-bulk-flow:flows-per-dpn" : "100000"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.848" starttime="20180614 14:15:38.848" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${str}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${json_body_get}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.849" level="INFO">${json_body_get} = {
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "100000",
   "sal-bulk-flow:star...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.849" starttime="20180614 14:15:38.849" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>${json_body_get}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:38.850" level="INFO">{
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "100000",
   "sal-bulk-flow:start-table-id" : "0",
   "sal-bulk-flow:end-table-id" : "1"
  }
}</msg>
                  <status status="PASS" endtime="20180614 14:15:38.850" starttime="20180614 14:15:38.850" />
               </kw>
               <msg timestamp="20180614 14:15:38.851" level="INFO">${temp_json_config_get} = {
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "100000",
   "sal-bulk-flow:star...</msg>
               <status status="PASS" endtime="20180614 14:15:38.851" starttime="20180614 14:15:38.843" />
            </kw>
            <kw name="Set DPN And Flow Count In Json Del" library="BulkomaticKeywords">
               <doc>Set new DPN count and flows count per DPN in the Bulkomatic Del json file.</doc>
               <arguments>
                  <arg>${orig_json_config_del}</arg>
                  <arg>${switch_count}</arg>
                  <arg>${flow_count_per_switch}</arg>
               </arguments>
               <assign>
                  <var>${temp_json_config_del}</var>
               </assign>
               <kw name="Get File" library="OperatingSystem">
                  <doc>Returns the contents of a specified file.</doc>
                  <arguments>
                     <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/../variables/openflowplugin/${json_config}</arg>
                  </arguments>
                  <assign>
                     <var>${body}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.853" html="yes" level="INFO">Getting file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_del_bulk_flow_config.json"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/variables/openflowplugin/sal_del_bulk_flow_config.json&lt;/a&gt;'.</msg>
                  <msg timestamp="20180614 14:15:38.853" level="INFO">${body} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "1",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true"...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.853" starttime="20180614 14:15:38.852" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "1"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.854" level="INFO">${get_string} = "sal-bulk-flow:dpn-count" : "1"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.854" starttime="20180614 14:15:38.854" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:dpn-count" : "${dpn_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.855" level="INFO">${put_string} = "sal-bulk-flow:dpn-count" : "32"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.855" starttime="20180614 14:15:38.855" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${body}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${str}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.856" level="INFO">${str} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "1000",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.856" starttime="20180614 14:15:38.855" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "1000"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.857" level="INFO">${get_string} = "sal-bulk-flow:flows-per-dpn" : "1000"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.857" starttime="20180614 14:15:38.856" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:flows-per-dpn" : "${flows_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.857" level="INFO">${put_string} = "sal-bulk-flow:flows-per-dpn" : "3125"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.857" starttime="20180614 14:15:38.857" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${str}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${json_body_del}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.858" level="INFO">${json_body_del} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "1",
   "sal-bulk-flow:seq" : "true...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.858" starttime="20180614 14:15:38.858" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:batch-size" : "1"</arg>
                  </arguments>
                  <assign>
                     <var>${get_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.859" level="INFO">${get_string} = "sal-bulk-flow:batch-size" : "1"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.859" starttime="20180614 14:15:38.859" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <arguments>
                     <arg>"sal-bulk-flow:batch-size" : "${flows_count}"</arg>
                  </arguments>
                  <assign>
                     <var>${put_string}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.860" level="INFO">${put_string} = "sal-bulk-flow:batch-size" : "3125"</msg>
                  <status status="PASS" endtime="20180614 14:15:38.860" starttime="20180614 14:15:38.859" />
               </kw>
               <kw name="Replace String Using Regexp" library="String">
                  <doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
                  <arguments>
                     <arg>${json_body_del}</arg>
                     <arg>${get_string}</arg>
                     <arg>${put_string}</arg>
                  </arguments>
                  <assign>
                     <var>${json_body_del}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:38.861" level="INFO">${json_body_del} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "t...</msg>
                  <status status="PASS" endtime="20180614 14:15:38.861" starttime="20180614 14:15:38.860" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>${json_body_del}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:38.861" level="INFO">{
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "true",
   "sal-bulk-flow:tx-chain" : "true",
   "sal-bulk-flow:sleep-for" : "0",
   "sal-bulk-flow:sleep-after" : "1",
   "sal-bulk-flow:start-table-id" : "0",
   "sal-bulk-flow:end-table-id" : "1"
  }
}</msg>
                  <status status="PASS" endtime="20180614 14:15:38.861" starttime="20180614 14:15:38.861" />
               </kw>
               <msg timestamp="20180614 14:15:38.862" level="INFO">${temp_json_config_del} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "t...</msg>
               <status status="PASS" endtime="20180614 14:15:38.862" starttime="20180614 14:15:38.851" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${temp_json_config_add}</arg>
               </arguments>
               <msg timestamp="20180614 14:15:38.862" level="INFO">${temp_json_config_add} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "tr...</msg>
               <status status="PASS" endtime="20180614 14:15:38.863" starttime="20180614 14:15:38.862" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${temp_json_config_get}</arg>
               </arguments>
               <msg timestamp="20180614 14:15:38.863" level="INFO">${temp_json_config_get} = {
"input" :
  {
   "sal-bulk-flow:verbose" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:is-config-ds" : "true",
   "sal-bulk-flow:flows-per-dpn" : "100000",
   "sal-bulk-flow:star...</msg>
               <status status="PASS" endtime="20180614 14:15:38.863" starttime="20180614 14:15:38.863" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${temp_json_config_del}</arg>
               </arguments>
               <msg timestamp="20180614 14:15:38.864" level="INFO">${temp_json_config_del} = {
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "t...</msg>
               <status status="PASS" endtime="20180614 14:15:38.864" starttime="20180614 14:15:38.864" />
            </kw>
            <doc>Initialize Variables and set the log.</doc>
            <status status="PASS" endtime="20180614 14:15:38.864" critical="no" starttime="20180614 14:15:36.491" />
         </test>
         <test id="s1-s1-t2" name="Start Mininet And verify Switches">
            <kw name="Set Variable If" library="BuiltIn">
               <doc>Sets variable based on the given condition.</doc>
               <arguments>
                  <arg>'${enable_openflow_tls}' == 'True'</arg>
                  <arg>6653</arg>
                  <arg>6633</arg>
               </arguments>
               <assign>
                  <var>${ofport}</var>
               </assign>
               <msg timestamp="20180614 14:15:38.867" level="INFO">${ofport} = 6653</msg>
               <status status="PASS" endtime="20180614 14:15:38.867" starttime="20180614 14:15:38.866" />
            </kw>
            <kw name="Set Variable If" library="BuiltIn">
               <doc>Sets variable based on the given condition.</doc>
               <arguments>
                  <arg>'${enable_openflow_tls}' == 'True'</arg>
                  <arg>ssl</arg>
                  <arg>tcp</arg>
               </arguments>
               <assign>
                  <var>${protocol}</var>
               </assign>
               <msg timestamp="20180614 14:15:38.868" level="INFO">${protocol} = ssl</msg>
               <status status="PASS" endtime="20180614 14:15:38.868" starttime="20180614 14:15:38.867" />
            </kw>
            <kw name="Start Mininet Multiple Controllers" library="MininetKeywords">
               <doc>Start Mininet with custom topology and connect to list of controllers in ${controller_index_list} or all if no list is provided.</doc>
               <arguments>
                  <arg>options=--topo linear,${switch_count}</arg>
                  <arg>ofport=${ofport}</arg>
                  <arg>protocol=${protocol}</arg>
               </arguments>
               <assign>
                  <var>${mininet_conn_id}</var>
               </assign>
               <kw name="List_Indices_Or_All" library="ClusterManagement">
                  <doc>Utility to allow ${EMPTY} as default argument value, as the internal list is computed at runtime.</doc>
                  <arguments>
                     <arg>given_list=${controller_index_list}</arg>
                  </arguments>
                  <assign>
                     <var>${index_list}</var>
                  </assign>
                  <kw name="Set Variable If" library="BuiltIn">
                     <doc>Sets variable based on the given condition.</doc>
                     <arguments>
                        <arg>"""${given_list}""" != ""</arg>
                        <arg>${given_list}</arg>
                        <arg>${ClusterManagement__member_index_list}</arg>
                     </arguments>
                     <assign>
                        <var>${return_list_reference}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:38.878" level="INFO">${return_list_reference} = [1]</msg>
                     <status status="PASS" endtime="20180614 14:15:38.878" starttime="20180614 14:15:38.877" />
                  </kw>
                  <kw name="Create List" library="BuiltIn">
                     <doc>Returns a list containing given items.</doc>
                     <arguments>
                        <arg>@{return_list_reference}</arg>
                     </arguments>
                     <assign>
                        <var>${return_list_copy}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:38.879" level="INFO">${return_list_copy} = [1]</msg>
                     <status status="PASS" endtime="20180614 14:15:38.879" starttime="20180614 14:15:38.879" />
                  </kw>
                  <msg timestamp="20180614 14:15:38.879" level="INFO">${index_list} = [1]</msg>
                  <status status="PASS" endtime="20180614 14:15:38.879" starttime="20180614 14:15:38.876" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Clear any existing mininet</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:38.880" level="INFO">Clear any existing mininet</msg>
                  <status status="PASS" endtime="20180614 14:15:38.880" starttime="20180614 14:15:38.880" />
               </kw>
               <kw name="Clean Mininet System" library="Utils">
                  <arguments>
                     <arg>${mininet}</arg>
                  </arguments>
                  <kw name="Run Command On Mininet" library="Utils">
                     <doc>Call Run Comand On Remote System, but with default values suitable for Mininet machine.</doc>
                     <arguments>
                        <arg>${system}</arg>
                        <arg>sudo mn -c</arg>
                     </arguments>
                     <kw name="Run Keyword And Return" library="BuiltIn">
                        <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                        <arguments>
                           <arg>Run Command On Remote System</arg>
                           <arg>${system}</arg>
                           <arg>${cmd}</arg>
                           <arg>${user}</arg>
                           <arg>${password}</arg>
                           <arg>prompt=${prompt}</arg>
                        </arguments>
                        <kw name="Run Command On Remote System" library="Utils">
                           <doc>Reduces the common work of running a command on a remote system to a single higher level</doc>
                           <arguments>
                              <arg>${system}</arg>
                              <arg>${cmd}</arg>
                              <arg>${user}</arg>
                              <arg>${password}</arg>
                              <arg>prompt=${prompt}</arg>
                           </arguments>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stdout}"!="True" and "${return_stderr}"!="True"</arg>
                                 <arg>Fail</arg>
                                 <arg>At least one of {return_stdout} or {return_stderr} args should be set to True</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:38.884" starttime="20180614 14:15:38.884" />
                           </kw>
                           <kw name="Get Connection" library="SSHLibrary">
                              <doc>Returns information about the connection.</doc>
                              <assign>
                                 <var>${current_ssh_connection}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:38.886" level="INFO">index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                              <msg timestamp="20180614 14:15:38.886" level="INFO">${current_ssh_connection} = index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                              <status status="PASS" endtime="20180614 14:15:38.886" starttime="20180614 14:15:38.885" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>Attempting to execute command "${cmd}" on remote system "${system}" by user "${user}" with keyfile pass "${keyfile_pass}" and prompt "${prompt}" and password "${password}"</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:38.887" level="INFO">Attempting to execute command "sudo mn -c" on remote system "10.30.170.57" by user "jenkins" with keyfile pass "any" and prompt "&gt;" and password ""</msg>
                              <status status="PASS" endtime="20180614 14:15:38.887" starttime="20180614 14:15:38.886" />
                           </kw>
                           <kw name="Open Connection" library="SSHLibrary">
                              <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                              <arguments>
                                 <arg>${system}</arg>
                                 <arg>prompt=${prompt}</arg>
                                 <arg>timeout=${prompt_timeout}</arg>
                              </arguments>
                              <assign>
                                 <var>${conn_id}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:38.888" level="INFO">${conn_id} = 3</msg>
                              <status status="PASS" endtime="20180614 14:15:38.888" starttime="20180614 14:15:38.887" />
                           </kw>
                           <kw name="Flexible_SSH_Login" library="SSHKeywords">
                              <doc>On active SSH session: if given non-empty password, do Login, else do Login With Public Key.</doc>
                              <arguments>
                                 <arg>${user}</arg>
                                 <arg>${password}</arg>
                              </arguments>
                              <kw name="Get Length" library="BuiltIn">
                                 <doc>Returns and logs the length of the given item as an integer.</doc>
                                 <arguments>
                                    <arg>${password}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${pwd_length}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:38.889" level="INFO">Length is 0</msg>
                                 <msg timestamp="20180614 14:15:38.889" level="INFO">${pwd_length} = 0</msg>
                                 <status status="PASS" endtime="20180614 14:15:38.889" starttime="20180614 14:15:38.889" />
                              </kw>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${pwd_length} &gt; 0</arg>
                                    <arg>SSHLibrary.Login</arg>
                                    <arg>${user}</arg>
                                    <arg>${password}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:38.890" starttime="20180614 14:15:38.890" />
                              </kw>
                              <kw name="Run Keyword And Return" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>SSHLibrary.Login With Public Key</arg>
                                    <arg>${user}</arg>
                                    <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                    <arg>${KEYFILE_PASS}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <kw name="Login With Public Key" library="SSHLibrary">
                                    <doc>Logs into the SSH server using key-based authentication.</doc>
                                    <arguments>
                                       <arg>${user}</arg>
                                       <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                       <arg>${KEYFILE_PASS}</arg>
                                       <arg>delay=${delay}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:38.891" level="INFO">Logging into '10.30.170.57:22' as 'jenkins'.</msg>
                                    <msg timestamp="20180614 14:15:39.329" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-116-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

130 packages can be updated.
66 updates are security updates.


[jenkins@releng-56341-274-1-mininet-ovs-28-0 ~]&gt;</msg>
                                    <status status="PASS" endtime="20180614 14:15:39.330" starttime="20180614 14:15:38.891" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:39.330" level="INFO">Returning from the enclosing user keyword.</msg>
                                 <status status="PASS" endtime="20180614 14:15:39.330" starttime="20180614 14:15:38.890" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:39.330" starttime="20180614 14:15:38.888" />
                           </kw>
                           <kw name="Execute Command" library="SSHLibrary">
                              <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                              <arguments>
                                 <arg>${cmd}</arg>
                                 <arg>return_stderr=True</arg>
                              </arguments>
                              <assign>
                                 <var>${stdout}</var>
                                 <var>${stderr}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:39.331" level="INFO">Executing command 'sudo mn -c'.</msg>
                              <msg timestamp="20180614 14:15:40.593" level="INFO">Command exited with return code 0.</msg>
                              <msg timestamp="20180614 14:15:40.593" level="INFO">${stdout} =</msg>
                              <msg timestamp="20180614 14:15:40.593" level="INFO">${stderr} = *** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2&gt; /dev/null
ki...</msg>
                              <status status="PASS" endtime="20180614 14:15:40.593" starttime="20180614 14:15:39.331" />
                           </kw>
                           <kw name="Close Connection" library="SSHLibrary">
                              <doc>Closes the current connection.</doc>
                              <status status="PASS" endtime="20180614 14:15:40.658" starttime="20180614 14:15:40.593" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${stderr}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:40.659" level="INFO">*** Removing excess controllers/ofprotocols/ofdatapaths/pings/noxes
killall controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2&gt; /dev/null
killall -9 controller ofprotocol ofdatapath ping nox_core lt-nox_core ovs-openflowd ovs-controller udpbwtest mnexec ivs 2&gt; /dev/null
pkill -9 -f "sudo mnexec"
*** Removing junk from /tmp
rm -f /tmp/vconn* /tmp/vlogs* /tmp/*.out /tmp/*.log
*** Removing old X11 tunnels
*** Removing excess kernel datapaths
ps ax | egrep -o 'dp[0-9]+' | sed 's/dp/nl:/'
***  Removing OVS datapaths
ovs-vsctl --timeout=1 list-br
ovs-vsctl --timeout=1 list-br
*** Removing all links of the pattern foo-ethX
ip link show | egrep -o '([-_.[:alnum:]]+-eth[[:digit:]]+)'
ip link show
*** Killing stale mininet node processes
pkill -9 -f mininet:
*** Shutting down stale tunnels
pkill -9 -f Tunnel=Ethernet
pkill -9 -f .ssh/mn
rm -f ~/.ssh/mn/*
*** Cleanup complete.</msg>
                              <status status="PASS" endtime="20180614 14:15:40.659" starttime="20180614 14:15:40.658" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stdout}"!="True"</arg>
                                 <arg>Return From Keyword</arg>
                                 <arg>${stderr}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:40.660" starttime="20180614 14:15:40.659" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stderr}"!="True"</arg>
                                 <arg>Return From Keyword</arg>
                                 <arg>${stdout}</arg>
                              </arguments>
                              <kw name="Return From Keyword" library="BuiltIn">
                                 <doc>Returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${stdout}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:40.661" level="INFO">Returning from the enclosing user keyword.</msg>
                                 <status status="PASS" endtime="20180614 14:15:40.661" starttime="20180614 14:15:40.661" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:40.661" starttime="20180614 14:15:40.660" />
                           </kw>
                           <kw type="teardown" name="Restore_Current_Ssh_Connection_From_Index" library="SSHKeywords">
                              <doc>Restore active SSH connection in SSHLibrary to given index.</doc>
                              <arguments>
                                 <arg>${current_ssh_connection.index}</arg>
                              </arguments>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${connection_index} is not None</arg>
                                    <arg>SSHLibrary.Switch Connection</arg>
                                    <arg>${connection_index}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:40.663" starttime="20180614 14:15:40.663" />
                              </kw>
                              <kw name="Open Connection" library="SSHLibrary">
                                 <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                                 <arguments>
                                    <arg>127.0.0.1</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:40.664" starttime="20180614 14:15:40.664" />
                              </kw>
                              <kw name="Close Connection" library="SSHLibrary">
                                 <doc>Closes the current connection.</doc>
                                 <status status="PASS" endtime="20180614 14:15:40.665" starttime="20180614 14:15:40.664" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:40.665" starttime="20180614 14:15:40.662" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:15:40.665" starttime="20180614 14:15:38.883" />
                        </kw>
                        <msg timestamp="20180614 14:15:40.665" level="INFO">Returning from the enclosing user keyword.</msg>
                        <status status="PASS" endtime="20180614 14:15:40.665" starttime="20180614 14:15:38.882" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:40.666" starttime="20180614 14:15:38.881" />
                  </kw>
                  <kw name="Run Command On Mininet" library="Utils">
                     <doc>Call Run Comand On Remote System, but with default values suitable for Mininet machine.</doc>
                     <arguments>
                        <arg>${system}</arg>
                        <arg>sudo ps -elf | egrep 'usr/local/bin/mn' | egrep python | awk '{print "sudo kill -9",$4}' | sh</arg>
                     </arguments>
                     <kw name="Run Keyword And Return" library="BuiltIn">
                        <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                        <arguments>
                           <arg>Run Command On Remote System</arg>
                           <arg>${system}</arg>
                           <arg>${cmd}</arg>
                           <arg>${user}</arg>
                           <arg>${password}</arg>
                           <arg>prompt=${prompt}</arg>
                        </arguments>
                        <kw name="Run Command On Remote System" library="Utils">
                           <doc>Reduces the common work of running a command on a remote system to a single higher level</doc>
                           <arguments>
                              <arg>${system}</arg>
                              <arg>${cmd}</arg>
                              <arg>${user}</arg>
                              <arg>${password}</arg>
                              <arg>prompt=${prompt}</arg>
                           </arguments>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stdout}"!="True" and "${return_stderr}"!="True"</arg>
                                 <arg>Fail</arg>
                                 <arg>At least one of {return_stdout} or {return_stderr} args should be set to True</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:40.669" starttime="20180614 14:15:40.669" />
                           </kw>
                           <kw name="Get Connection" library="SSHLibrary">
                              <doc>Returns information about the connection.</doc>
                              <assign>
                                 <var>${current_ssh_connection}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:40.670" level="INFO">index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                              <msg timestamp="20180614 14:15:40.670" level="INFO">${current_ssh_connection} = index=None
path_separator=/
prompt=None
width=80
newline=

height=24
encoding=utf8
alias=None
host=None
timeout=3 seconds
term_type=vt100
port=22</msg>
                              <status status="PASS" endtime="20180614 14:15:40.670" starttime="20180614 14:15:40.669" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>Attempting to execute command "${cmd}" on remote system "${system}" by user "${user}" with keyfile pass "${keyfile_pass}" and prompt "${prompt}" and password "${password}"</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:40.671" level="INFO">Attempting to execute command "sudo ps -elf | egrep 'usr/local/bin/mn' | egrep python | awk '{print "sudo kill -9",$4}' | sh" on remote system "10.30.170.57" by user "jenkins" with keyfile pass "any" and prompt "&gt;" and password ""</msg>
                              <status status="PASS" endtime="20180614 14:15:40.671" starttime="20180614 14:15:40.670" />
                           </kw>
                           <kw name="Open Connection" library="SSHLibrary">
                              <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                              <arguments>
                                 <arg>${system}</arg>
                                 <arg>prompt=${prompt}</arg>
                                 <arg>timeout=${prompt_timeout}</arg>
                              </arguments>
                              <assign>
                                 <var>${conn_id}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:40.672" level="INFO">${conn_id} = 5</msg>
                              <status status="PASS" endtime="20180614 14:15:40.672" starttime="20180614 14:15:40.671" />
                           </kw>
                           <kw name="Flexible_SSH_Login" library="SSHKeywords">
                              <doc>On active SSH session: if given non-empty password, do Login, else do Login With Public Key.</doc>
                              <arguments>
                                 <arg>${user}</arg>
                                 <arg>${password}</arg>
                              </arguments>
                              <kw name="Get Length" library="BuiltIn">
                                 <doc>Returns and logs the length of the given item as an integer.</doc>
                                 <arguments>
                                    <arg>${password}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${pwd_length}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:40.674" level="INFO">Length is 0</msg>
                                 <msg timestamp="20180614 14:15:40.674" level="INFO">${pwd_length} = 0</msg>
                                 <status status="PASS" endtime="20180614 14:15:40.674" starttime="20180614 14:15:40.673" />
                              </kw>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${pwd_length} &gt; 0</arg>
                                    <arg>SSHLibrary.Login</arg>
                                    <arg>${user}</arg>
                                    <arg>${password}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:40.674" starttime="20180614 14:15:40.674" />
                              </kw>
                              <kw name="Run Keyword And Return" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>SSHLibrary.Login With Public Key</arg>
                                    <arg>${user}</arg>
                                    <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                    <arg>${KEYFILE_PASS}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <kw name="Login With Public Key" library="SSHLibrary">
                                    <doc>Logs into the SSH server using key-based authentication.</doc>
                                    <arguments>
                                       <arg>${user}</arg>
                                       <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                       <arg>${KEYFILE_PASS}</arg>
                                       <arg>delay=${delay}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:40.676" level="INFO">Logging into '10.30.170.57:22' as 'jenkins'.</msg>
                                    <msg timestamp="20180614 14:15:41.051" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-116-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

130 packages can be updated.
66 updates are security updates.


[jenkins@releng-56341-274-1-mininet-ovs-28-0 ~]&gt;</msg>
                                    <status status="PASS" endtime="20180614 14:15:41.051" starttime="20180614 14:15:40.675" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:41.051" level="INFO">Returning from the enclosing user keyword.</msg>
                                 <status status="PASS" endtime="20180614 14:15:41.052" starttime="20180614 14:15:40.675" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:41.052" starttime="20180614 14:15:40.672" />
                           </kw>
                           <kw name="Execute Command" library="SSHLibrary">
                              <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                              <arguments>
                                 <arg>${cmd}</arg>
                                 <arg>return_stderr=True</arg>
                              </arguments>
                              <assign>
                                 <var>${stdout}</var>
                                 <var>${stderr}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:41.053" level="INFO">Executing command 'sudo ps -elf | egrep 'usr/local/bin/mn' | egrep python | awk '{print "sudo kill -9",$4}' | sh'.</msg>
                              <msg timestamp="20180614 14:15:41.086" level="INFO">Command exited with return code -1.</msg>
                              <msg timestamp="20180614 14:15:41.086" level="INFO">${stdout} =</msg>
                              <msg timestamp="20180614 14:15:41.086" level="INFO">${stderr} =</msg>
                              <status status="PASS" endtime="20180614 14:15:41.086" starttime="20180614 14:15:41.052" />
                           </kw>
                           <kw name="Close Connection" library="SSHLibrary">
                              <doc>Closes the current connection.</doc>
                              <status status="PASS" endtime="20180614 14:15:41.151" starttime="20180614 14:15:41.087" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${stderr}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:41.152" level="INFO" />
                              <status status="PASS" endtime="20180614 14:15:41.152" starttime="20180614 14:15:41.152" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stdout}"!="True"</arg>
                                 <arg>Return From Keyword</arg>
                                 <arg>${stderr}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:41.153" starttime="20180614 14:15:41.153" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"${return_stderr}"!="True"</arg>
                                 <arg>Return From Keyword</arg>
                                 <arg>${stdout}</arg>
                              </arguments>
                              <kw name="Return From Keyword" library="BuiltIn">
                                 <doc>Returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${stdout}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:41.155" level="INFO">Returning from the enclosing user keyword.</msg>
                                 <status status="PASS" endtime="20180614 14:15:41.155" starttime="20180614 14:15:41.155" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:41.155" starttime="20180614 14:15:41.154" />
                           </kw>
                           <kw type="teardown" name="Restore_Current_Ssh_Connection_From_Index" library="SSHKeywords">
                              <doc>Restore active SSH connection in SSHLibrary to given index.</doc>
                              <arguments>
                                 <arg>${current_ssh_connection.index}</arg>
                              </arguments>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>${connection_index} is not None</arg>
                                    <arg>SSHLibrary.Switch Connection</arg>
                                    <arg>${connection_index}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:41.158" starttime="20180614 14:15:41.157" />
                              </kw>
                              <kw name="Open Connection" library="SSHLibrary">
                                 <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                                 <arguments>
                                    <arg>127.0.0.1</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:41.158" starttime="20180614 14:15:41.158" />
                              </kw>
                              <kw name="Close Connection" library="SSHLibrary">
                                 <doc>Closes the current connection.</doc>
                                 <status status="PASS" endtime="20180614 14:15:41.159" starttime="20180614 14:15:41.158" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:41.159" starttime="20180614 14:15:41.156" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:15:41.159" starttime="20180614 14:15:40.667" />
                        </kw>
                        <msg timestamp="20180614 14:15:41.159" level="INFO">Returning from the enclosing user keyword.</msg>
                        <status status="PASS" endtime="20180614 14:15:41.159" starttime="20180614 14:15:40.667" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:41.160" starttime="20180614 14:15:40.666" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:41.160" starttime="20180614 14:15:38.880" />
               </kw>
               <kw name="Open_Connection_To_Tools_System" library="SSHKeywords">
                  <doc>Open a connection to the tools system at ${ip_address} and return its identifier.</doc>
                  <arguments>
                     <arg>ip_address=${mininet}</arg>
                     <arg>timeout=${timeout}</arg>
                  </arguments>
                  <assign>
                     <var>${mininet_conn_id}</var>
                  </assign>
                  <kw name="Open Connection" library="SSHLibrary">
                     <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                     <arguments>
                        <arg>${ip_address}</arg>
                        <arg>prompt=${TOOLS_SYSTEM_PROMPT}</arg>
                        <arg>timeout=${timeout}</arg>
                     </arguments>
                     <assign>
                        <var>${tools_connection}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:41.169" level="INFO">${tools_connection} = 7</msg>
                     <status status="PASS" endtime="20180614 14:15:41.169" starttime="20180614 14:15:41.168" />
                  </kw>
                  <kw name="Flexible_Mininet_Login" library="SSHKeywords">
                     <doc>Call Flexible SSH Login, but with default values suitable for Mininet machine.</doc>
                     <kw name="Run Keyword And Return" library="BuiltIn">
                        <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                        <arguments>
                           <arg>Flexible SSH Login</arg>
                           <arg>user=${user}</arg>
                           <arg>password=${password}</arg>
                           <arg>delay=${delay}</arg>
                        </arguments>
                        <kw name="Flexible_SSH_Login" library="SSHKeywords">
                           <doc>On active SSH session: if given non-empty password, do Login, else do Login With Public Key.</doc>
                           <arguments>
                              <arg>user=${user}</arg>
                              <arg>password=${password}</arg>
                              <arg>delay=${delay}</arg>
                           </arguments>
                           <kw name="Get Length" library="BuiltIn">
                              <doc>Returns and logs the length of the given item as an integer.</doc>
                              <arguments>
                                 <arg>${password}</arg>
                              </arguments>
                              <assign>
                                 <var>${pwd_length}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:41.172" level="INFO">Length is 0</msg>
                              <msg timestamp="20180614 14:15:41.172" level="INFO">${pwd_length} = 0</msg>
                              <status status="PASS" endtime="20180614 14:15:41.172" starttime="20180614 14:15:41.171" />
                           </kw>
                           <kw name="Run Keyword And Return If" library="BuiltIn">
                              <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                              <arguments>
                                 <arg>${pwd_length} &gt; 0</arg>
                                 <arg>SSHLibrary.Login</arg>
                                 <arg>${user}</arg>
                                 <arg>${password}</arg>
                                 <arg>delay=${delay}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:41.173" starttime="20180614 14:15:41.172" />
                           </kw>
                           <kw name="Run Keyword And Return" library="BuiltIn">
                              <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                              <arguments>
                                 <arg>SSHLibrary.Login With Public Key</arg>
                                 <arg>${user}</arg>
                                 <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                 <arg>${KEYFILE_PASS}</arg>
                                 <arg>delay=${delay}</arg>
                              </arguments>
                              <kw name="Login With Public Key" library="SSHLibrary">
                                 <doc>Logs into the SSH server using key-based authentication.</doc>
                                 <arguments>
                                    <arg>${user}</arg>
                                    <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                    <arg>${KEYFILE_PASS}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:41.174" level="INFO">Logging into '10.30.170.57:22' as 'jenkins'.</msg>
                                 <msg timestamp="20180614 14:15:41.548" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-116-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

130 packages can be updated.
66 updates are security updates.


[jenkins@releng-56341-274-1-mininet-ovs-28-0 ~]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:41.548" starttime="20180614 14:15:41.173" />
                              </kw>
                              <msg timestamp="20180614 14:15:41.549" level="INFO">Returning from the enclosing user keyword.</msg>
                              <status status="PASS" endtime="20180614 14:15:41.549" starttime="20180614 14:15:41.173" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:15:41.550" starttime="20180614 14:15:41.170" />
                        </kw>
                        <msg timestamp="20180614 14:15:41.550" level="INFO">Returning from the enclosing user keyword.</msg>
                        <status status="PASS" endtime="20180614 14:15:41.550" starttime="20180614 14:15:41.170" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:41.551" starttime="20180614 14:15:41.169" />
                  </kw>
                  <msg timestamp="20180614 14:15:41.552" level="INFO">${mininet_conn_id} = 7</msg>
                  <status status="PASS" endtime="20180614 14:15:41.552" starttime="20180614 14:15:41.167" />
               </kw>
               <kw name="Set Suite Variable" library="BuiltIn">
                  <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
                  <arguments>
                     <arg>${mininet_conn_id}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:41.554" level="INFO">${mininet_conn_id} = 7</msg>
                  <status status="PASS" endtime="20180614 14:15:41.554" starttime="20180614 14:15:41.553" />
               </kw>
               <kw name="Run Keyword If" library="BuiltIn">
                  <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                  <arguments>
                     <arg>'${custom}' != '${EMPTY}'</arg>
                     <arg>Put File</arg>
                     <arg>${custom}</arg>
                  </arguments>
                  <status status="PASS" endtime="20180614 14:15:41.556" starttime="20180614 14:15:41.555" />
               </kw>
               <kw name="Run Keyword If" library="BuiltIn">
                  <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                  <arguments>
                     <arg>'${protocol}' == 'ssl'</arg>
                     <arg>Install Certificates In Mininet</arg>
                  </arguments>
                  <kw name="Install Certificates In Mininet" library="MininetKeywords">
                     <doc>Copy and install certificates in simulator.</doc>
                     <kw name="Comment" library="BuiltIn">
                        <doc>Displays the given messages in the log file as keyword arguments.</doc>
                        <arguments>
                           <arg>Copy Certificates</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:41.561" starttime="20180614 14:15:41.561" />
                     </kw>
                     <kw name="Put File" library="SSHLibrary">
                        <doc>Uploads file(s) from the local machine to the remote machine.</doc>
                        <arguments>
                           <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/${switch_private_key}</arg>
                           <arg>.</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.575" level="INFO">[chan 1] Opened sftp connection (server version 3)</msg>
                        <msg timestamp="20180614 14:15:41.591" level="INFO">'/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/switch.key' -&gt; '/home/jenkins//switch.key'</msg>
                        <status status="PASS" endtime="20180614 14:15:41.591" starttime="20180614 14:15:41.562" />
                     </kw>
                     <kw name="Put File" library="SSHLibrary">
                        <doc>Uploads file(s) from the local machine to the remote machine.</doc>
                        <arguments>
                           <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/${switch_certificate}</arg>
                           <arg>.</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.609" level="INFO">'/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/switch.crt' -&gt; '/home/jenkins//switch.crt'</msg>
                        <status status="PASS" endtime="20180614 14:15:41.610" starttime="20180614 14:15:41.592" />
                     </kw>
                     <kw name="Put File" library="SSHLibrary">
                        <doc>Uploads file(s) from the local machine to the remote machine.</doc>
                        <arguments>
                           <arg>/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/${controller_ca_list}</arg>
                           <arg>.</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.625" level="INFO">'/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/libraries/tls/cachain.crt' -&gt; '/home/jenkins//cachain.crt'</msg>
                        <status status="PASS" endtime="20180614 14:15:41.626" starttime="20180614 14:15:41.611" />
                     </kw>
                     <kw name="Comment" library="BuiltIn">
                        <doc>Displays the given messages in the log file as keyword arguments.</doc>
                        <arguments>
                           <arg>Install Certificates</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:41.628" starttime="20180614 14:15:41.627" />
                     </kw>
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo mv ${switch_private_key} /etc/openvswitch &amp;&amp; sudo mv ${switch_certificate} /etc/openvswitch &amp;&amp; sudo mv ${controller_ca_list} /etc/openvswitch</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.630" level="INFO">Executing command 'sudo mv switch.key /etc/openvswitch &amp;&amp; sudo mv switch.crt /etc/openvswitch &amp;&amp; sudo mv cachain.crt /etc/openvswitch'.</msg>
                        <msg timestamp="20180614 14:15:41.655" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:41.655" starttime="20180614 14:15:41.629" />
                     </kw>
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set-ssl /etc/openvswitch/${switch_private_key} /etc/openvswitch/${switch_certificate} /etc/openvswitch/${controller_ca_list}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.658" level="INFO">Executing command 'sudo ovs-vsctl set-ssl /etc/openvswitch/switch.key /etc/openvswitch/switch.crt /etc/openvswitch/cachain.crt'.</msg>
                        <msg timestamp="20180614 14:15:41.715" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:41.716" starttime="20180614 14:15:41.656" />
                     </kw>
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>.</arg>
                           <arg>sudo ovs-vsctl get-ssl</arg>
                        </arguments>
                        <assign>
                           <var>${std_out}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:41.717" level="INFO">Executing command '.'.</msg>
                        <msg timestamp="20180614 14:15:41.763" level="INFO">Command exited with return code 2.</msg>
                        <msg timestamp="20180614 14:15:41.764" level="INFO">${std_out} =</msg>
                        <status status="PASS" endtime="20180614 14:15:41.764" starttime="20180614 14:15:41.717" />
                     </kw>
                     <kw name="Log" library="BuiltIn">
                        <doc>Logs the given message with the given level.</doc>
                        <arguments>
                           <arg>${std_out}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:41.766" level="INFO" />
                        <status status="PASS" endtime="20180614 14:15:41.766" starttime="20180614 14:15:41.765" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:41.767" starttime="20180614 14:15:41.559" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:41.767" starttime="20180614 14:15:41.558" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Start mininet ${options}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:41.768" level="INFO">Start mininet --topo linear,32</msg>
                  <status status="PASS" endtime="20180614 14:15:41.769" starttime="20180614 14:15:41.768" />
               </kw>
               <kw name="Write" library="SSHLibrary">
                  <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                  <arguments>
                     <arg>sudo mn ${options}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:41.817" level="INFO">sudo mn --topo linear,32</msg>
                  <status status="PASS" endtime="20180614 14:15:41.817" starttime="20180614 14:15:41.769" />
               </kw>
               <kw name="Read Until" library="SSHLibrary">
                  <doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
                  <arguments>
                     <arg>mininet&gt;</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:43.962" level="INFO">*** No default OpenFlow controller found for default switch!
*** Falling back to OVS Bridge
*** Creating network
*** Adding controller
*** Adding hosts:
h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20 h21 h22 h23 h24 h25 h26 h27 h28 h29 h30 h31 h32 
*** Adding switches:
s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 
*** Adding links:
(h1, s1) (h2, s2) (h3, s3) (h4, s4) (h5, s5) (h6, s6) (h7, s7) (h8, s8) (h9, s9) (h10, s10) (h11, s11) (h12, s12) (h13, s13) (h14, s14) (h15, s15) (h16, s16) (h17, s17) (h18, s18) (h19, s19) (h20, s20) (h21, s21) (h22, s22) (h23, s23) (h24, s24) (h25, s25) (h26, s26) (h27, s27) (h28, s28) (h29, s29) (h30, s30) (h31, s31) (h32, s32) (s2, s1) (s3, s2) (s4, s3) (s5, s4) (s6, s5) (s7, s6) (s8, s7) (s9, s8) (s10, s9) (s11, s10) (s12, s11) (s13, s12) (s14, s13) (s15, s14) (s16, s15) (s17, s16) (s18, s17) (s19, s18) (s20, s19) (s21, s20) (s22, s21) (s23, s22) (s24, s23) (s25, s24) (s26, s25) (s27, s26) (s28, s27) (s29, s28) (s30, s29) (s31, s30) (s32, s31) 
*** Configuring hosts
h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20 h21 h22 h23 h24 h25 h26 h27 h28 h29 h30 h31 h32 
*** Starting controller

*** Starting 32 switches
s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 ...
*** Starting CLI:
mininet&gt;</msg>
                  <status status="PASS" endtime="20180614 14:15:43.962" starttime="20180614 14:15:41.817" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Create controller configuration</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:43.963" level="INFO">Create controller configuration</msg>
                  <status status="PASS" endtime="20180614 14:15:43.963" starttime="20180614 14:15:43.962" />
               </kw>
               <kw name="Set Variable" library="BuiltIn">
                  <doc>Returns the given values which can then be assigned to a variables.</doc>
                  <assign>
                     <var>${controller_opt}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:43.963" level="INFO">${controller_opt} =</msg>
                  <status status="PASS" endtime="20180614 14:15:43.963" starttime="20180614 14:15:43.963" />
               </kw>
               <kw type="for" name="${index} IN [ @{index_list} ]">
                  <kw type="foritem" name="${index} = 1">
                     <kw name="Catenate" library="BuiltIn">
                        <doc>Catenates the given items together and returns the resulted string.</doc>
                        <arguments>
                           <arg>${controller_opt}</arg>
                           <arg>${SPACE}${protocol}:${ODL_SYSTEM_${index}_IP}:${ofport}</arg>
                        </arguments>
                        <assign>
                           <var>${controller_opt}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:43.965" level="INFO">${controller_opt} =   ssl:10.30.170.13:6653</msg>
                        <status status="PASS" endtime="20180614 14:15:43.965" starttime="20180614 14:15:43.964" />
                     </kw>
                     <kw name="Log" library="BuiltIn">
                        <doc>Logs the given message with the given level.</doc>
                        <arguments>
                           <arg>${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:43.965" level="INFO">ssl:10.30.170.13:6653</msg>
                        <status status="PASS" endtime="20180614 14:15:43.966" starttime="20180614 14:15:43.965" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:43.966" starttime="20180614 14:15:43.964" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:43.966" starttime="20180614 14:15:43.963" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Open extra SSH connection to configure the OVS bridges</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:43.966" level="INFO">Open extra SSH connection to configure the OVS bridges</msg>
                  <status status="PASS" endtime="20180614 14:15:43.966" starttime="20180614 14:15:43.966" />
               </kw>
               <kw name="Open_Connection_To_Tools_System" library="SSHKeywords">
                  <doc>Open a connection to the tools system at ${ip_address} and return its identifier.</doc>
                  <arguments>
                     <arg>ip_address=${mininet}</arg>
                     <arg>timeout=${timeout}</arg>
                  </arguments>
                  <kw name="Open Connection" library="SSHLibrary">
                     <doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
                     <arguments>
                        <arg>${ip_address}</arg>
                        <arg>prompt=${TOOLS_SYSTEM_PROMPT}</arg>
                        <arg>timeout=${timeout}</arg>
                     </arguments>
                     <assign>
                        <var>${tools_connection}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:43.975" level="INFO">${tools_connection} = 8</msg>
                     <status status="PASS" endtime="20180614 14:15:43.975" starttime="20180614 14:15:43.975" />
                  </kw>
                  <kw name="Flexible_Mininet_Login" library="SSHKeywords">
                     <doc>Call Flexible SSH Login, but with default values suitable for Mininet machine.</doc>
                     <kw name="Run Keyword And Return" library="BuiltIn">
                        <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                        <arguments>
                           <arg>Flexible SSH Login</arg>
                           <arg>user=${user}</arg>
                           <arg>password=${password}</arg>
                           <arg>delay=${delay}</arg>
                        </arguments>
                        <kw name="Flexible_SSH_Login" library="SSHKeywords">
                           <doc>On active SSH session: if given non-empty password, do Login, else do Login With Public Key.</doc>
                           <arguments>
                              <arg>user=${user}</arg>
                              <arg>password=${password}</arg>
                              <arg>delay=${delay}</arg>
                           </arguments>
                           <kw name="Get Length" library="BuiltIn">
                              <doc>Returns and logs the length of the given item as an integer.</doc>
                              <arguments>
                                 <arg>${password}</arg>
                              </arguments>
                              <assign>
                                 <var>${pwd_length}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:43.978" level="INFO">Length is 0</msg>
                              <msg timestamp="20180614 14:15:43.978" level="INFO">${pwd_length} = 0</msg>
                              <status status="PASS" endtime="20180614 14:15:43.978" starttime="20180614 14:15:43.978" />
                           </kw>
                           <kw name="Run Keyword And Return If" library="BuiltIn">
                              <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                              <arguments>
                                 <arg>${pwd_length} &gt; 0</arg>
                                 <arg>SSHLibrary.Login</arg>
                                 <arg>${user}</arg>
                                 <arg>${password}</arg>
                                 <arg>delay=${delay}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:43.979" starttime="20180614 14:15:43.978" />
                           </kw>
                           <kw name="Run Keyword And Return" library="BuiltIn">
                              <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                              <arguments>
                                 <arg>SSHLibrary.Login With Public Key</arg>
                                 <arg>${user}</arg>
                                 <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                 <arg>${KEYFILE_PASS}</arg>
                                 <arg>delay=${delay}</arg>
                              </arguments>
                              <kw name="Login With Public Key" library="SSHLibrary">
                                 <doc>Logs into the SSH server using key-based authentication.</doc>
                                 <arguments>
                                    <arg>${user}</arg>
                                    <arg>${USER_HOME}/.ssh/${SSH_KEY}</arg>
                                    <arg>${KEYFILE_PASS}</arg>
                                    <arg>delay=${delay}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:43.980" level="INFO">Logging into '10.30.170.57:22' as 'jenkins'.</msg>
                                 <msg timestamp="20180614 14:15:44.431" level="INFO">Read output: Welcome to Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-116-generic x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

130 packages can be updated.
66 updates are security updates.


[jenkins@releng-56341-274-1-mininet-ovs-28-0 ~]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:44.431" starttime="20180614 14:15:43.980" />
                              </kw>
                              <msg timestamp="20180614 14:15:44.431" level="INFO">Returning from the enclosing user keyword.</msg>
                              <status status="PASS" endtime="20180614 14:15:44.431" starttime="20180614 14:15:43.979" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:15:44.432" starttime="20180614 14:15:43.977" />
                        </kw>
                        <msg timestamp="20180614 14:15:44.432" level="INFO">Returning from the enclosing user keyword.</msg>
                        <status status="PASS" endtime="20180614 14:15:44.432" starttime="20180614 14:15:43.976" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.432" starttime="20180614 14:15:43.976" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:44.432" starttime="20180614 14:15:43.974" />
               </kw>
               <kw name="Execute Command" library="SSHLibrary">
                  <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                  <arguments>
                     <arg>sudo ovs-vsctl show | grep Bridge | wc -l</arg>
                  </arguments>
                  <assign>
                     <var>${num_bridges}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:44.433" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | wc -l'.</msg>
                  <msg timestamp="20180614 14:15:44.466" level="INFO">Command exited with return code 0.</msg>
                  <msg timestamp="20180614 14:15:44.466" level="INFO">${num_bridges} = 32</msg>
                  <status status="PASS" endtime="20180614 14:15:44.466" starttime="20180614 14:15:44.433" />
               </kw>
               <kw name="Convert To Integer" library="BuiltIn">
                  <doc>Converts the given item to an integer number.</doc>
                  <arguments>
                     <arg>${num_bridges}</arg>
                  </arguments>
                  <assign>
                     <var>${num_bridges}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:44.467" level="INFO">${num_bridges} = 32</msg>
                  <status status="PASS" endtime="20180614 14:15:44.468" starttime="20180614 14:15:44.467" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Configure OVS controllers ${controller_opt} in all bridges</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:44.468" level="INFO">Configure OVS controllers   ssl:10.30.170.13:6653 in all bridges</msg>
                  <status status="PASS" endtime="20180614 14:15:44.468" starttime="20180614 14:15:44.468" />
               </kw>
               <kw name="Create List" library="BuiltIn">
                  <doc>Returns a list containing given items.</doc>
                  <assign>
                     <var>${bridges}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:44.469" level="INFO">${bridges} = []</msg>
                  <status status="PASS" endtime="20180614 14:15:44.469" starttime="20180614 14:15:44.469" />
               </kw>
               <kw type="for" name="${i} IN RANGE [ 1 | ${num_bridges+1} ]">
                  <kw type="foritem" name="${i} = 1">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.470" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -1 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.597" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.597" level="INFO">${bridge} = "s1"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.597" starttime="20180614 14:15:44.470" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.598" starttime="20180614 14:15:44.598" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.598" starttime="20180614 14:15:44.469" />
                  </kw>
                  <kw type="foritem" name="${i} = 2">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.599" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -2 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.663" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.663" level="INFO">${bridge} = "s10"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.663" starttime="20180614 14:15:44.599" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.664" starttime="20180614 14:15:44.664" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.665" starttime="20180614 14:15:44.598" />
                  </kw>
                  <kw type="foritem" name="${i} = 3">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.665" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -3 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.729" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.730" level="INFO">${bridge} = "s11"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.730" starttime="20180614 14:15:44.665" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.731" starttime="20180614 14:15:44.730" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.731" starttime="20180614 14:15:44.665" />
                  </kw>
                  <kw type="foritem" name="${i} = 4">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.731" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -4 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.795" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.796" level="INFO">${bridge} = "s12"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.796" starttime="20180614 14:15:44.731" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.796" starttime="20180614 14:15:44.796" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.797" starttime="20180614 14:15:44.731" />
                  </kw>
                  <kw type="foritem" name="${i} = 5">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.797" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -5 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.861" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.861" level="INFO">${bridge} = "s13"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.861" starttime="20180614 14:15:44.797" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.862" starttime="20180614 14:15:44.862" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.862" starttime="20180614 14:15:44.797" />
                  </kw>
                  <kw type="foritem" name="${i} = 6">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.863" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -6 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.927" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.927" level="INFO">${bridge} = "s14"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.927" starttime="20180614 14:15:44.863" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.928" starttime="20180614 14:15:44.928" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.928" starttime="20180614 14:15:44.862" />
                  </kw>
                  <kw type="foritem" name="${i} = 7">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.929" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -7 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:44.993" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:44.993" level="INFO">${bridge} = "s15"</msg>
                        <status status="PASS" endtime="20180614 14:15:44.993" starttime="20180614 14:15:44.929" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:44.994" starttime="20180614 14:15:44.994" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:44.994" starttime="20180614 14:15:44.928" />
                  </kw>
                  <kw type="foritem" name="${i} = 8">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:44.995" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -8 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.059" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.059" level="INFO">${bridge} = "s16"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.059" starttime="20180614 14:15:44.995" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.060" starttime="20180614 14:15:45.060" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.060" starttime="20180614 14:15:44.994" />
                  </kw>
                  <kw type="foritem" name="${i} = 9">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.061" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -9 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.145" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.146" level="INFO">${bridge} = "s17"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.146" starttime="20180614 14:15:45.061" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.147" starttime="20180614 14:15:45.146" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.147" starttime="20180614 14:15:45.060" />
                  </kw>
                  <kw type="foritem" name="${i} = 10">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.148" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -10 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.212" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.212" level="INFO">${bridge} = "s18"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.212" starttime="20180614 14:15:45.147" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.213" starttime="20180614 14:15:45.213" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.213" starttime="20180614 14:15:45.147" />
                  </kw>
                  <kw type="foritem" name="${i} = 11">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.214" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -11 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.278" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.278" level="INFO">${bridge} = "s19"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.278" starttime="20180614 14:15:45.214" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.279" starttime="20180614 14:15:45.278" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.279" starttime="20180614 14:15:45.213" />
                  </kw>
                  <kw type="foritem" name="${i} = 12">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.280" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -12 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.344" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.344" level="INFO">${bridge} = "s2"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.344" starttime="20180614 14:15:45.279" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.345" starttime="20180614 14:15:45.344" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.345" starttime="20180614 14:15:45.279" />
                  </kw>
                  <kw type="foritem" name="${i} = 13">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.346" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -13 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.410" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.410" level="INFO">${bridge} = "s20"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.410" starttime="20180614 14:15:45.345" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.411" starttime="20180614 14:15:45.410" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.411" starttime="20180614 14:15:45.345" />
                  </kw>
                  <kw type="foritem" name="${i} = 14">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.412" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -14 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.475" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.476" level="INFO">${bridge} = "s21"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.476" starttime="20180614 14:15:45.411" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.477" starttime="20180614 14:15:45.476" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.477" starttime="20180614 14:15:45.411" />
                  </kw>
                  <kw type="foritem" name="${i} = 15">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.478" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -15 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.574" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.574" level="INFO">${bridge} = "s22"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.574" starttime="20180614 14:15:45.477" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.575" starttime="20180614 14:15:45.575" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.575" starttime="20180614 14:15:45.477" />
                  </kw>
                  <kw type="foritem" name="${i} = 16">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.576" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -16 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.672" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.672" level="INFO">${bridge} = "s23"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.673" starttime="20180614 14:15:45.576" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.673" starttime="20180614 14:15:45.673" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.673" starttime="20180614 14:15:45.575" />
                  </kw>
                  <kw type="foritem" name="${i} = 17">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.674" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -17 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.738" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.738" level="INFO">${bridge} = "s24"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.738" starttime="20180614 14:15:45.674" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.739" starttime="20180614 14:15:45.739" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.739" starttime="20180614 14:15:45.674" />
                  </kw>
                  <kw type="foritem" name="${i} = 18">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.740" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -18 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.814" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.814" level="INFO">${bridge} = "s25"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.815" starttime="20180614 14:15:45.740" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.815" starttime="20180614 14:15:45.815" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.815" starttime="20180614 14:15:45.739" />
                  </kw>
                  <kw type="foritem" name="${i} = 19">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.816" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -19 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.870" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.871" level="INFO">${bridge} = "s26"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.871" starttime="20180614 14:15:45.816" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.872" starttime="20180614 14:15:45.871" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.872" starttime="20180614 14:15:45.816" />
                  </kw>
                  <kw type="foritem" name="${i} = 20">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.873" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -20 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:45.959" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:45.960" level="INFO">${bridge} = "s27"</msg>
                        <status status="PASS" endtime="20180614 14:15:45.960" starttime="20180614 14:15:45.873" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:45.961" starttime="20180614 14:15:45.960" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:45.961" starttime="20180614 14:15:45.872" />
                  </kw>
                  <kw type="foritem" name="${i} = 21">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:45.961" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -21 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.058" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.058" level="INFO">${bridge} = "s28"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.058" starttime="20180614 14:15:45.961" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.059" starttime="20180614 14:15:46.059" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.059" starttime="20180614 14:15:45.961" />
                  </kw>
                  <kw type="foritem" name="${i} = 22">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.060" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -22 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.124" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.124" level="INFO">${bridge} = "s29"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.124" starttime="20180614 14:15:46.060" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.125" starttime="20180614 14:15:46.125" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.125" starttime="20180614 14:15:46.059" />
                  </kw>
                  <kw type="foritem" name="${i} = 23">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.127" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -23 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.180" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.181" level="INFO">${bridge} = "s3"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.181" starttime="20180614 14:15:46.126" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.182" starttime="20180614 14:15:46.181" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.182" starttime="20180614 14:15:46.125" />
                  </kw>
                  <kw type="foritem" name="${i} = 24">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.183" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -24 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.280" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.280" level="INFO">${bridge} = "s30"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.280" starttime="20180614 14:15:46.183" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.281" starttime="20180614 14:15:46.280" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.281" starttime="20180614 14:15:46.182" />
                  </kw>
                  <kw type="foritem" name="${i} = 25">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.282" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -25 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.335" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.336" level="INFO">${bridge} = "s31"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.336" starttime="20180614 14:15:46.282" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.337" starttime="20180614 14:15:46.336" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.337" starttime="20180614 14:15:46.281" />
                  </kw>
                  <kw type="foritem" name="${i} = 26">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.338" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -26 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.424" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.424" level="INFO">${bridge} = "s32"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.424" starttime="20180614 14:15:46.337" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.425" starttime="20180614 14:15:46.424" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.425" starttime="20180614 14:15:46.337" />
                  </kw>
                  <kw type="foritem" name="${i} = 27">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.426" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -27 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.512" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.512" level="INFO">${bridge} = "s4"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.512" starttime="20180614 14:15:46.425" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.513" starttime="20180614 14:15:46.513" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.513" starttime="20180614 14:15:46.425" />
                  </kw>
                  <kw type="foritem" name="${i} = 28">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.514" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -28 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.600" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.600" level="INFO">${bridge} = "s5"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.600" starttime="20180614 14:15:46.513" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.601" starttime="20180614 14:15:46.601" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.601" starttime="20180614 14:15:46.513" />
                  </kw>
                  <kw type="foritem" name="${i} = 29">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.602" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -29 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.688" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.688" level="INFO">${bridge} = "s6"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.688" starttime="20180614 14:15:46.602" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.690" starttime="20180614 14:15:46.689" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.690" starttime="20180614 14:15:46.601" />
                  </kw>
                  <kw type="foritem" name="${i} = 30">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.691" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -30 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.787" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.788" level="INFO">${bridge} = "s7"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.788" starttime="20180614 14:15:46.690" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.789" starttime="20180614 14:15:46.788" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.789" starttime="20180614 14:15:46.690" />
                  </kw>
                  <kw type="foritem" name="${i} = 31">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.789" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -31 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.853" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.854" level="INFO">${bridge} = "s8"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.854" starttime="20180614 14:15:46.789" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.855" starttime="20180614 14:15:46.854" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.855" starttime="20180614 14:15:46.789" />
                  </kw>
                  <kw type="foritem" name="${i} = 32">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -${i} | tail -1</arg>
                        </arguments>
                        <assign>
                           <var>${bridge}</var>
                        </assign>
                        <msg timestamp="20180614 14:15:46.855" level="INFO">Executing command 'sudo ovs-vsctl show | grep Bridge | cut -c 12- | sort | head -32 | tail -1'.</msg>
                        <msg timestamp="20180614 14:15:46.920" level="INFO">Command exited with return code 0.</msg>
                        <msg timestamp="20180614 14:15:46.920" level="INFO">${bridge} = "s9"</msg>
                        <status status="PASS" endtime="20180614 14:15:46.920" starttime="20180614 14:15:46.855" />
                     </kw>
                     <kw name="Append To List" library="Collections">
                        <doc>Adds ``values`` to the end of ``list``.</doc>
                        <arguments>
                           <arg>${bridges}</arg>
                           <arg>${bridge}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:15:46.921" starttime="20180614 14:15:46.920" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:46.921" starttime="20180614 14:15:46.855" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:46.921" starttime="20180614 14:15:44.469" />
               </kw>
               <kw type="for" name="${bridge} IN [ @{bridges} ]">
                  <kw type="foritem" name="${bridge} = &quot;s1&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:46.922" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s1" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s1"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.037" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.037" starttime="20180614 14:15:46.922" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.037" starttime="20180614 14:15:46.921" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s10&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.038" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s10" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s10"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.145" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.145" starttime="20180614 14:15:47.038" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.145" starttime="20180614 14:15:47.037" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s11&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.146" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s11" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s11"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.252" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.253" starttime="20180614 14:15:47.145" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.253" starttime="20180614 14:15:47.145" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s12&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.254" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s12" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s12"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.362" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.362" starttime="20180614 14:15:47.253" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.362" starttime="20180614 14:15:47.253" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s13&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.363" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s13" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s13"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.437" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.437" starttime="20180614 14:15:47.363" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.438" starttime="20180614 14:15:47.362" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s14&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.439" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s14" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s14"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.513" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.513" starttime="20180614 14:15:47.438" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.513" starttime="20180614 14:15:47.438" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s15&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.514" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s15" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s15"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.621" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.621" starttime="20180614 14:15:47.514" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.621" starttime="20180614 14:15:47.513" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s16&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.622" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s16" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s16"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.728" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.729" starttime="20180614 14:15:47.621" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.729" starttime="20180614 14:15:47.621" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s17&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.730" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s17" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s17"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.837" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.837" starttime="20180614 14:15:47.729" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.837" starttime="20180614 14:15:47.729" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s18&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.838" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s18" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s18"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:47.945" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:47.945" starttime="20180614 14:15:47.838" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:47.945" starttime="20180614 14:15:47.837" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s19&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:47.946" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s19" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s19"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.063" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.063" starttime="20180614 14:15:47.946" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.063" starttime="20180614 14:15:47.945" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s2&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.064" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s2" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s2"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.138" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.139" starttime="20180614 14:15:48.064" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.139" starttime="20180614 14:15:48.063" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s20&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.140" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s20" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s20"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.246" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.247" starttime="20180614 14:15:48.139" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.247" starttime="20180614 14:15:48.139" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s21&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.248" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s21" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s21"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.365" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.365" starttime="20180614 14:15:48.247" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.365" starttime="20180614 14:15:48.247" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s22&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.366" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s22" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s22"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.483" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.483" starttime="20180614 14:15:48.366" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.484" starttime="20180614 14:15:48.365" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s23&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.485" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s23" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s23"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.559" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.559" starttime="20180614 14:15:48.484" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.559" starttime="20180614 14:15:48.484" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s24&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.560" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s24" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s24"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.677" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.677" starttime="20180614 14:15:48.560" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.677" starttime="20180614 14:15:48.559" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s25&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.679" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s25" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s25"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.773" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.773" starttime="20180614 14:15:48.678" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.773" starttime="20180614 14:15:48.678" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s26&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.774" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s26" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s26"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.859" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.859" starttime="20180614 14:15:48.774" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.859" starttime="20180614 14:15:48.773" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s27&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.861" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s27" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s27"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:48.934" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:48.935" starttime="20180614 14:15:48.860" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:48.935" starttime="20180614 14:15:48.859" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s28&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:48.936" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s28" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s28"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.043" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.043" starttime="20180614 14:15:48.935" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.043" starttime="20180614 14:15:48.935" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s29&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.044" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s29" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s29"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.151" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.151" starttime="20180614 14:15:49.044" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.151" starttime="20180614 14:15:49.043" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s3&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.152" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s3" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s3"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.259" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.259" starttime="20180614 14:15:49.151" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.259" starttime="20180614 14:15:49.151" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s30&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.260" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s30" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s30"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.367" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.367" starttime="20180614 14:15:49.260" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.367" starttime="20180614 14:15:49.259" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s31&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.368" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s31" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s31"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.485" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.485" starttime="20180614 14:15:49.368" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.485" starttime="20180614 14:15:49.367" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s32&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.487" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s32" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s32"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.561" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.561" starttime="20180614 14:15:49.486" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.561" starttime="20180614 14:15:49.486" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s4&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.562" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s4" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s4"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.669" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.669" starttime="20180614 14:15:49.562" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.669" starttime="20180614 14:15:49.561" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s5&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.671" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s5" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s5"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.777" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.778" starttime="20180614 14:15:49.670" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.778" starttime="20180614 14:15:49.669" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s6&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.779" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s6" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s6"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.853" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.853" starttime="20180614 14:15:49.778" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.853" starttime="20180614 14:15:49.778" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s7&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.854" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s7" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s7"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:49.961" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:49.961" starttime="20180614 14:15:49.854" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:49.961" starttime="20180614 14:15:49.853" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s8&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:49.962" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s8" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s8"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:50.069" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:50.069" starttime="20180614 14:15:49.962" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:50.069" starttime="20180614 14:15:49.961" />
                  </kw>
                  <kw type="foritem" name="${bridge} = &quot;s9&quot;">
                     <kw name="Execute Command" library="SSHLibrary">
                        <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                        <arguments>
                           <arg>sudo ovs-vsctl set bridge ${bridge} protocols=OpenFlow${ofversion} &amp;&amp; sudo ovs-vsctl set-controller ${bridge} ${controller_opt}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:15:50.070" level="INFO">Executing command 'sudo ovs-vsctl set bridge "s9" protocols=OpenFlow13 &amp;&amp; sudo ovs-vsctl set-controller "s9"   ssl:10.30.170.13:6653'.</msg>
                        <msg timestamp="20180614 14:15:50.187" level="INFO">Command exited with return code 0.</msg>
                        <status status="PASS" endtime="20180614 14:15:50.187" starttime="20180614 14:15:50.070" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:15:50.187" starttime="20180614 14:15:50.069" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:50.187" starttime="20180614 14:15:46.921" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>Check OVS configuratiom</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:50.188" level="INFO">Check OVS configuratiom</msg>
                  <status status="PASS" endtime="20180614 14:15:50.188" starttime="20180614 14:15:50.188" />
               </kw>
               <kw name="Execute Command" library="SSHLibrary">
                  <doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
                  <arguments>
                     <arg>sudo ovs-vsctl show</arg>
                  </arguments>
                  <assign>
                     <var>${output}</var>
                  </assign>
                  <msg timestamp="20180614 14:15:50.189" level="INFO">Executing command 'sudo ovs-vsctl show'.</msg>
                  <msg timestamp="20180614 14:15:50.275" level="INFO">Command exited with return code 0.</msg>
                  <msg timestamp="20180614 14:15:50.275" level="INFO">${output} = a99b5960-81be-47b0-be34-02697396b3d7
    Bridge "s19"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s19"
            Interface "s19"
                type: inte...</msg>
                  <status status="PASS" endtime="20180614 14:15:50.275" starttime="20180614 14:15:50.188" />
               </kw>
               <kw name="Log" library="BuiltIn">
                  <doc>Logs the given message with the given level.</doc>
                  <arguments>
                     <arg>${output}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:15:50.276" level="INFO">a99b5960-81be-47b0-be34-02697396b3d7
    Bridge "s19"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s19"
            Interface "s19"
                type: internal
        Port "s19-eth3"
            Interface "s19-eth3"
        Port "s19-eth1"
            Interface "s19-eth1"
        Port "s19-eth2"
            Interface "s19-eth2"
    Bridge "s10"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s10-eth1"
            Interface "s10-eth1"
        Port "s10-eth3"
            Interface "s10-eth3"
        Port "s10"
            Interface "s10"
                type: internal
        Port "s10-eth2"
            Interface "s10-eth2"
    Bridge "s3"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s3-eth3"
            Interface "s3-eth3"
        Port "s3-eth1"
            Interface "s3-eth1"
        Port "s3"
            Interface "s3"
                type: internal
        Port "s3-eth2"
            Interface "s3-eth2"
    Bridge "s23"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s23"
            Interface "s23"
                type: internal
        Port "s23-eth1"
            Interface "s23-eth1"
        Port "s23-eth2"
            Interface "s23-eth2"
        Port "s23-eth3"
            Interface "s23-eth3"
    Bridge "s7"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s7"
            Interface "s7"
                type: internal
        Port "s7-eth1"
            Interface "s7-eth1"
        Port "s7-eth2"
            Interface "s7-eth2"
        Port "s7-eth3"
            Interface "s7-eth3"
    Bridge "s5"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s5-eth1"
            Interface "s5-eth1"
        Port "s5"
            Interface "s5"
                type: internal
        Port "s5-eth2"
            Interface "s5-eth2"
        Port "s5-eth3"
            Interface "s5-eth3"
    Bridge "s1"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s1-eth2"
            Interface "s1-eth2"
        Port "s1"
            Interface "s1"
                type: internal
        Port "s1-eth1"
            Interface "s1-eth1"
    Bridge "s25"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s25-eth1"
            Interface "s25-eth1"
        Port "s25-eth2"
            Interface "s25-eth2"
        Port "s25"
            Interface "s25"
                type: internal
        Port "s25-eth3"
            Interface "s25-eth3"
    Bridge "s11"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s11-eth1"
            Interface "s11-eth1"
        Port "s11-eth3"
            Interface "s11-eth3"
        Port "s11-eth2"
            Interface "s11-eth2"
        Port "s11"
            Interface "s11"
                type: internal
    Bridge "s8"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s8-eth1"
            Interface "s8-eth1"
        Port "s8-eth3"
            Interface "s8-eth3"
        Port "s8"
            Interface "s8"
                type: internal
        Port "s8-eth2"
            Interface "s8-eth2"
    Bridge "s21"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s21-eth1"
            Interface "s21-eth1"
        Port "s21"
            Interface "s21"
                type: internal
        Port "s21-eth2"
            Interface "s21-eth2"
        Port "s21-eth3"
            Interface "s21-eth3"
    Bridge "s27"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s27-eth1"
            Interface "s27-eth1"
        Port "s27-eth3"
            Interface "s27-eth3"
        Port "s27-eth2"
            Interface "s27-eth2"
        Port "s27"
            Interface "s27"
                type: internal
    Bridge "s17"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s17-eth3"
            Interface "s17-eth3"
        Port "s17-eth1"
            Interface "s17-eth1"
        Port "s17"
            Interface "s17"
                type: internal
        Port "s17-eth2"
            Interface "s17-eth2"
    Bridge "s18"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s18-eth3"
            Interface "s18-eth3"
        Port "s18"
            Interface "s18"
                type: internal
        Port "s18-eth2"
            Interface "s18-eth2"
        Port "s18-eth1"
            Interface "s18-eth1"
    Bridge "s13"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s13-eth2"
            Interface "s13-eth2"
        Port "s13-eth1"
            Interface "s13-eth1"
        Port "s13"
            Interface "s13"
                type: internal
        Port "s13-eth3"
            Interface "s13-eth3"
    Bridge "s28"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s28-eth2"
            Interface "s28-eth2"
        Port "s28"
            Interface "s28"
                type: internal
        Port "s28-eth1"
            Interface "s28-eth1"
        Port "s28-eth3"
            Interface "s28-eth3"
    Bridge "s9"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s9-eth1"
            Interface "s9-eth1"
        Port "s9-eth3"
            Interface "s9-eth3"
        Port "s9"
            Interface "s9"
                type: internal
        Port "s9-eth2"
            Interface "s9-eth2"
    Bridge "s2"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s2-eth3"
            Interface "s2-eth3"
        Port "s2-eth2"
            Interface "s2-eth2"
        Port "s2"
            Interface "s2"
                type: internal
        Port "s2-eth1"
            Interface "s2-eth1"
    Bridge "s32"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s32-eth1"
            Interface "s32-eth1"
        Port "s32"
            Interface "s32"
                type: internal
        Port "s32-eth2"
            Interface "s32-eth2"
    Bridge "s20"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s20-eth1"
            Interface "s20-eth1"
        Port "s20-eth2"
            Interface "s20-eth2"
        Port "s20"
            Interface "s20"
                type: internal
        Port "s20-eth3"
            Interface "s20-eth3"
    Bridge "s24"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s24-eth1"
            Interface "s24-eth1"
        Port "s24-eth2"
            Interface "s24-eth2"
        Port "s24-eth3"
            Interface "s24-eth3"
        Port "s24"
            Interface "s24"
                type: internal
    Bridge "s14"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s14-eth3"
            Interface "s14-eth3"
        Port "s14-eth2"
            Interface "s14-eth2"
        Port "s14"
            Interface "s14"
                type: internal
        Port "s14-eth1"
            Interface "s14-eth1"
    Bridge "s6"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s6"
            Interface "s6"
                type: internal
        Port "s6-eth3"
            Interface "s6-eth3"
        Port "s6-eth1"
            Interface "s6-eth1"
        Port "s6-eth2"
            Interface "s6-eth2"
    Bridge "s12"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s12-eth2"
            Interface "s12-eth2"
        Port "s12-eth3"
            Interface "s12-eth3"
        Port "s12-eth1"
            Interface "s12-eth1"
        Port "s12"
            Interface "s12"
                type: internal
    Bridge "s22"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s22"
            Interface "s22"
                type: internal
        Port "s22-eth2"
            Interface "s22-eth2"
        Port "s22-eth3"
            Interface "s22-eth3"
        Port "s22-eth1"
            Interface "s22-eth1"
    Bridge "s29"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s29-eth1"
            Interface "s29-eth1"
        Port "s29"
            Interface "s29"
                type: internal
        Port "s29-eth2"
            Interface "s29-eth2"
        Port "s29-eth3"
            Interface "s29-eth3"
    Bridge "s26"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s26-eth1"
            Interface "s26-eth1"
        Port "s26"
            Interface "s26"
                type: internal
        Port "s26-eth3"
            Interface "s26-eth3"
        Port "s26-eth2"
            Interface "s26-eth2"
    Bridge "s30"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s30"
            Interface "s30"
                type: internal
        Port "s30-eth3"
            Interface "s30-eth3"
        Port "s30-eth1"
            Interface "s30-eth1"
        Port "s30-eth2"
            Interface "s30-eth2"
    Bridge "s4"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s4-eth1"
            Interface "s4-eth1"
        Port "s4-eth2"
            Interface "s4-eth2"
        Port "s4-eth3"
            Interface "s4-eth3"
        Port "s4"
            Interface "s4"
                type: internal
    Bridge "s31"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s31-eth3"
            Interface "s31-eth3"
        Port "s31-eth1"
            Interface "s31-eth1"
        Port "s31"
            Interface "s31"
                type: internal
        Port "s31-eth2"
            Interface "s31-eth2"
    Bridge "s16"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s16-eth3"
            Interface "s16-eth3"
        Port "s16-eth1"
            Interface "s16-eth1"
        Port "s16"
            Interface "s16"
                type: internal
        Port "s16-eth2"
            Interface "s16-eth2"
    Bridge "s15"
        Controller "ssl:10.30.170.13:6653"
        fail_mode: standalone
        Port "s15-eth1"
            Interface "s15-eth1"
        Port "s15-eth2"
            Interface "s15-eth2"
        Port "s15-eth3"
            Interface "s15-eth3"
        Port "s15"
            Interface "s15"
                type: internal
    ovs_version: "2.8.1"</msg>
                  <status status="PASS" endtime="20180614 14:15:50.276" starttime="20180614 14:15:50.276" />
               </kw>
               <kw name="Close Connection" library="SSHLibrary">
                  <doc>Closes the current connection.</doc>
                  <status status="PASS" endtime="20180614 14:15:50.341" starttime="20180614 14:15:50.277" />
               </kw>
               <msg timestamp="20180614 14:15:50.342" level="INFO">${mininet_conn_id} = 7</msg>
               <status status="PASS" endtime="20180614 14:15:50.342" starttime="20180614 14:15:38.875" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${mininet_conn_id}</arg>
               </arguments>
               <msg timestamp="20180614 14:15:50.343" level="INFO">${mininet_conn_id} = 7</msg>
               <status status="PASS" endtime="20180614 14:15:50.343" starttime="20180614 14:15:50.342" />
            </kw>
            <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
               <doc>Runs the specified keyword and retries if it fails.</doc>
               <arguments>
                  <arg>${mininet_timeout}</arg>
                  <arg>2s</arg>
                  <arg>ClusterOpenFlow.Verify_Switch_Connections_Running_On_Member</arg>
                  <arg>${switch_count}</arg>
                  <arg>1</arg>
               </arguments>
               <kw name="Verify Switch Connections Running On Member" library="ClusterOpenFlow">
                  <doc>Check if number of Switch connections on member of given index is equal to 32.</doc>
                  <arguments>
                     <arg>${switch_count}</arg>
                     <arg>1</arg>
                  </arguments>
                  <kw name="Get Switches Count" library="ScaleClient">
                     <doc>Gives the count of the switches presnt in the operational inventory nodes datastore.</doc>
                     <arguments>
                        <arg>controller=${ODL_SYSTEM_${member_index}_IP}</arg>
                     </arguments>
                     <assign>
                        <var>${count}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:51.534" level="INFO">${count} = 26</msg>
                     <status status="PASS" endtime="20180614 14:15:51.534" starttime="20180614 14:15:50.345" />
                  </kw>
                  <kw name="Should Be Equal As Numbers" library="BuiltIn">
                     <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                     <arguments>
                        <arg>${switch_count}</arg>
                        <arg>${count}</arg>
                     </arguments>
                     <msg timestamp="20180614 14:15:51.535" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
                     <msg timestamp="20180614 14:15:51.535" level="FAIL">32.0 != 26.0</msg>
                     <status status="FAIL" endtime="20180614 14:15:51.536" starttime="20180614 14:15:51.535" />
                  </kw>
                  <status status="FAIL" endtime="20180614 14:15:51.536" starttime="20180614 14:15:50.344" />
               </kw>
               <kw name="Verify Switch Connections Running On Member" library="ClusterOpenFlow">
                  <doc>Check if number of Switch connections on member of given index is equal to 32.</doc>
                  <arguments>
                     <arg>${switch_count}</arg>
                     <arg>1</arg>
                  </arguments>
                  <kw name="Get Switches Count" library="ScaleClient">
                     <doc>Gives the count of the switches presnt in the operational inventory nodes datastore.</doc>
                     <arguments>
                        <arg>controller=${ODL_SYSTEM_${member_index}_IP}</arg>
                     </arguments>
                     <assign>
                        <var>${count}</var>
                     </assign>
                     <msg timestamp="20180614 14:15:53.938" level="INFO">${count} = 32</msg>
                     <status status="PASS" endtime="20180614 14:15:53.938" starttime="20180614 14:15:53.538" />
                  </kw>
                  <kw name="Should Be Equal As Numbers" library="BuiltIn">
                     <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                     <arguments>
                        <arg>${switch_count}</arg>
                        <arg>${count}</arg>
                     </arguments>
                     <msg timestamp="20180614 14:15:53.939" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
                     <status status="PASS" endtime="20180614 14:15:53.939" starttime="20180614 14:15:53.938" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:53.940" starttime="20180614 14:15:53.537" />
               </kw>
               <status status="PASS" endtime="20180614 14:15:53.940" starttime="20180614 14:15:50.343" />
            </kw>
            <kw name="Comment" library="BuiltIn">
               <doc>Displays the given messages in the log file as keyword arguments.</doc>
               <arguments>
                  <arg>Fail the entire suite if switches cannot connect</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:15:53.941" starttime="20180614 14:15:53.940" />
            </kw>
            <kw type="teardown" name="Run Keyword If Test Failed" library="BuiltIn">
               <doc>Runs the given keyword with the given arguments, if the test failed.</doc>
               <arguments>
                  <arg>Fatal Error</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:15:53.942" starttime="20180614 14:15:53.941" />
            </kw>
            <doc>Start mininet, controller OF port 6653 should be enabled for TLS while port 6633 should be for TCP.</doc>
            <status status="PASS" endtime="20180614 14:15:53.942" critical="no" starttime="20180614 14:15:38.865" />
         </test>
         <test id="s1-s1-t3" name="Add Bulk Flow">
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_write_start_time}</var>
               </assign>
               <msg timestamp="20180614 14:15:53.944" level="INFO">${config_datastore_write_start_time} = 2018-06-14 14:15:53.943</msg>
               <status status="PASS" endtime="20180614 14:15:53.944" starttime="20180614 14:15:53.943" />
            </kw>
            <kw name="Add Bulk Flow In Node" library="BulkomaticKeywords">
               <doc>Add Bulk Flow in member ${controller_index} and wait until operation is completed.</doc>
               <arguments>
                  <arg>${temp_json_config_add}</arg>
                  <arg>1</arg>
                  <arg>${operation_timeout}</arg>
               </arguments>
               <kw name="Add Bulk Flow" library="BulkomaticKeywords">
                  <doc>Add Bulk Flow in member 1 according to ${json_body_add}.</doc>
                  <arguments>
                     <arg>${json_body_add}</arg>
                     <arg>${controller_index}</arg>
                  </arguments>
                  <kw name="Post_As_Json_To_Member" library="ClusterManagement">
                     <doc>Send a POST with the supplied uri and data to member ${member_index}.</doc>
                     <arguments>
                        <arg>${ADD_BULK_CONFIG_NODES_API}</arg>
                        <arg>${json_body_add}</arg>
                        <arg>${controller_index}</arg>
                     </arguments>
                     <assign>
                        <var>${resp}</var>
                     </assign>
                     <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                        <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                        <arguments>
                           <arg>member_index=${member_index}</arg>
                        </arguments>
                        <assign>
                           <var>${session}</var>
                        </assign>
                        <kw name="Set Variable" library="BuiltIn">
                           <doc>Returns the given values which can then be assigned to a variables.</doc>
                           <arguments>
                              <arg>ClusterManagement__session_${member_index}</arg>
                           </arguments>
                           <assign>
                              <var>${session}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:53.962" level="INFO">${session} = ClusterManagement__session_1</msg>
                           <status status="PASS" endtime="20180614 14:15:53.962" starttime="20180614 14:15:53.961" />
                        </kw>
                        <msg timestamp="20180614 14:15:53.962" level="INFO">${session} = ClusterManagement__session_1</msg>
                        <status status="PASS" endtime="20180614 14:15:53.962" starttime="20180614 14:15:53.961" />
                     </kw>
                     <kw name="Post_As_Json_To_Uri" library="TemplatedRequests">
                        <doc>Specify JSON headers and return Post_To_Uri normalized response text.</doc>
                        <arguments>
                           <arg>uri=${uri}</arg>
                           <arg>data=${data}</arg>
                           <arg>session=${session}</arg>
                        </arguments>
                        <assign>
                           <var>${response_text}</var>
                        </assign>
                        <kw name="Post_To_Uri" library="TemplatedRequests">
                           <doc>POST data to given URI, check status code and return response text.</doc>
                           <arguments>
                              <arg>uri=${uri}</arg>
                              <arg>data=${data}</arg>
                              <arg>accept=${ACCEPT_EMPTY}</arg>
                              <arg>content_type=${HEADERS_YANG_JSON}</arg>
                              <arg>session=${session}</arg>
                              <arg>normalize_json=True</arg>
                              <arg>additional_allowed_status_codes=${additional_allowed_status_codes}</arg>
                              <arg>explicit_status_codes=${explicit_status_codes}</arg>
                              <arg>http_timeout=${http_timeout}</arg>
                           </arguments>
                           <assign>
                              <var>${response_text}</var>
                           </assign>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${uri}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:53.978" level="INFO">/restconf/operations/sal-bulk-flow:flow-test</msg>
                              <status status="PASS" endtime="20180614 14:15:53.979" starttime="20180614 14:15:53.978" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${data}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:53.979" level="INFO">{
"input" :
  {
   "sal-bulk-flow:is-add" : "true",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "true",
   "sal-bulk-flow:tx-chain" : "true",
   "sal-bulk-flow:sleep-for" : "0",
   "sal-bulk-flow:sleep-after" : "1",
   "sal-bulk-flow:start-table-id" : "0",
   "sal-bulk-flow:end-table-id" : "1"
  }
}</msg>
                              <status status="PASS" endtime="20180614 14:15:53.979" starttime="20180614 14:15:53.979" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${content_type}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:53.980" level="INFO">{u'Content-Type': u'application/yang.data+json'}</msg>
                              <status status="PASS" endtime="20180614 14:15:53.980" starttime="20180614 14:15:53.980" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${accept}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:15:53.980" level="INFO">{}</msg>
                              <status status="PASS" endtime="20180614 14:15:53.981" starttime="20180614 14:15:53.980" />
                           </kw>
                           <kw name="Join_Two_Headers" library="TemplatedRequests">
                              <doc>Take two dicts, join them, return result. Second argument values take precedence.</doc>
                              <arguments>
                                 <arg>first=${content_type}</arg>
                                 <arg>second=${accept}</arg>
                              </arguments>
                              <assign>
                                 <var>${headers}</var>
                              </assign>
                              <kw name="Copy Dictionary" library="Collections">
                                 <doc>Returns a copy of the given dictionary.</doc>
                                 <arguments>
                                    <arg>${first}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${accumulator}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:53.982" level="INFO">${accumulator} = {u'Content-Type': u'application/yang.data+json'}</msg>
                                 <status status="PASS" endtime="20180614 14:15:53.983" starttime="20180614 14:15:53.982" />
                              </kw>
                              <kw name="Get Dictionary Items" library="Collections">
                                 <doc>Returns items of the given ``dictionary``.</doc>
                                 <arguments>
                                    <arg>${second}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${items_to_add}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:53.983" level="INFO">${items_to_add} = []</msg>
                                 <status status="PASS" endtime="20180614 14:15:53.983" starttime="20180614 14:15:53.983" />
                              </kw>
                              <kw name="Set To Dictionary" library="Collections">
                                 <doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
                                 <arguments>
                                    <arg>${accumulator}</arg>
                                    <arg>@{items_to_add}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:53.984" starttime="20180614 14:15:53.983" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accumulator}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:53.984" level="INFO">{u'Content-Type': u'application/yang.data+json'}</msg>
                                 <status status="PASS" endtime="20180614 14:15:53.985" starttime="20180614 14:15:53.984" />
                              </kw>
                              <msg timestamp="20180614 14:15:53.985" level="INFO">${headers} = {u'Content-Type': u'application/yang.data+json'}</msg>
                              <status status="PASS" endtime="20180614 14:15:53.985" starttime="20180614 14:15:53.981" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                 <arg>RequestsLibrary.Post_Request</arg>
                                 <arg>alias=${session}</arg>
                                 <arg>uri=${uri}</arg>
                                 <arg>data=${data}</arg>
                                 <arg>headers=${headers}</arg>
                                 <arg>ELSE</arg>
                                 <arg>RequestsLibrary.Post_Request</arg>
                                 <arg>alias=${session}</arg>
                                 <arg>uri=${uri}</arg>
                                 <arg>data=${data}</arg>
                                 <arg>headers=${headers}</arg>
                                 <arg>timeout=${http_timeout}</arg>
                              </arguments>
                              <assign>
                                 <var>${response}</var>
                              </assign>
                              <kw name="Post Request" library="RequestsLibrary">
                                 <doc>Send a POST request on the session object found using the</doc>
                                 <arguments>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>data=${data}</arg>
                                    <arg>headers=${headers}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:54.103" level="INFO">Post Request using : alias=ClusterManagement__session_1, uri=/restconf/operations/sal-bulk-flow:flow-test, data=&lt;application/yang.data+json&gt;, headers={u'Content-Type': u'application/yang.data+json'}, files=None, allow_redirects=True</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.103" starttime="20180614 14:15:53.986" />
                              </kw>
                              <msg timestamp="20180614 14:15:54.103" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                              <status status="PASS" endtime="20180614 14:15:54.104" starttime="20180614 14:15:53.985" />
                           </kw>
                           <kw name="Check_Status_Code" library="TemplatedRequests">
                              <doc>Log response text, check status_code is one of allowed ones.</doc>
                              <arguments>
                                 <arg>${response}</arg>
                                 <arg>additional_allowed_status_codes=${additional_allowed_status_codes}</arg>
                                 <arg>explicit_status_codes=${explicit_status_codes}</arg>
                              </arguments>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:54.105" level="INFO" />
                                 <status status="PASS" endtime="20180614 14:15:54.105" starttime="20180614 14:15:54.105" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:54.106" level="INFO">200</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.106" starttime="20180614 14:15:54.106" />
                              </kw>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                    <arg>Collections.List_Should_Contain_Value</arg>
                                    <arg>${explicit_status_codes}</arg>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:54.107" starttime="20180614 14:15:54.106" />
                              </kw>
                              <kw name="Combine Lists" library="Collections">
                                 <doc>Combines the given ``lists`` together and returns the result.</doc>
                                 <arguments>
                                    <arg>${ALLOWED_STATUS_CODES}</arg>
                                    <arg>${additional_allowed_status_codes}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${final_allowd_list}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:54.108" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.108" starttime="20180614 14:15:54.107" />
                              </kw>
                              <kw name="List Should Contain Value" library="Collections">
                                 <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                 <arguments>
                                    <arg>${final_allowd_list}</arg>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:15:54.109" starttime="20180614 14:15:54.108" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:15:54.109" starttime="20180614 14:15:54.104" />
                           </kw>
                           <kw name="Run Keyword Unless" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                              <arguments>
                                 <arg>${normalize_json}</arg>
                                 <arg>BuiltIn.Return_From_Keyword</arg>
                                 <arg>${response.text}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:15:54.109" starttime="20180614 14:15:54.109" />
                           </kw>
                           <kw name="Normalize Json Text" library="norm_json">
                              <doc>Attempt to return sorted indented JSON string.</doc>
                              <arguments>
                                 <arg>${response.text}</arg>
                                 <arg>jmes_path=${jmes_path}</arg>
                              </arguments>
                              <assign>
                                 <var>${text_normalized}</var>
                              </assign>
                              <msg timestamp="20180614 14:15:54.110" level="INFO">${text_normalized} =</msg>
                              <status status="PASS" endtime="20180614 14:15:54.110" starttime="20180614 14:15:54.110" />
                           </kw>
                           <msg timestamp="20180614 14:15:54.111" level="INFO">${response_text} =</msg>
                           <status status="PASS" endtime="20180614 14:15:54.111" starttime="20180614 14:15:53.977" />
                        </kw>
                        <msg timestamp="20180614 14:15:54.111" level="INFO">${response_text} =</msg>
                        <status status="PASS" endtime="20180614 14:15:54.111" starttime="20180614 14:15:53.975" />
                     </kw>
                     <msg timestamp="20180614 14:15:54.111" level="INFO">${resp} =</msg>
                     <status status="PASS" endtime="20180614 14:15:54.111" starttime="20180614 14:15:53.960" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:15:54.112" starttime="20180614 14:15:53.952" />
               </kw>
               <kw name="Wait Until Write Finishes" library="BulkomaticKeywords">
                  <doc>Wait Until Write operation status is OK in member 1.</doc>
                  <arguments>
                     <arg>${controller_index}</arg>
                     <arg>${timeout}</arg>
                  </arguments>
                  <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
                     <doc>Runs the specified keyword and retries if it fails.</doc>
                     <arguments>
                        <arg>${timeout}</arg>
                        <arg>1s</arg>
                        <arg>BulkomaticKeywords.Operation Status Check</arg>
                        <arg>${jolokia_write_op_status}</arg>
                        <arg>${controller_index}</arg>
                     </arguments>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:54.123" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.124" starttime="20180614 14:15:54.123" />
                              </kw>
                              <msg timestamp="20180614 14:15:54.124" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:54.124" starttime="20180614 14:15:54.122" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:54.126" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.126" starttime="20180614 14:15:54.125" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:54.126" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.127" starttime="20180614 14:15:54.126" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:54.186" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:54.187" starttime="20180614 14:15:54.128" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:54.187" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:54.187" starttime="20180614 14:15:54.127" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:54.188" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985754,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:54.189" starttime="20180614 14:15:54.188" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:54.189" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:54.189" starttime="20180614 14:15:54.189" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:54.190" starttime="20180614 14:15:54.190" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:54.191" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:54.191" starttime="20180614 14:15:54.190" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:54.192" starttime="20180614 14:15:54.191" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:54.192" starttime="20180614 14:15:54.187" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:54.193" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:54.193" starttime="20180614 14:15:54.193" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:54.193" starttime="20180614 14:15:54.192" />
                              </kw>
                              <msg timestamp="20180614 14:15:54.194" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985754,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:54.194" starttime="20180614 14:15:54.124" />
                           </kw>
                           <msg timestamp="20180614 14:15:54.194" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985754,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:54.194" starttime="20180614 14:15:54.122" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:54.195" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985754,"status":200}</msg>
                           <msg timestamp="20180614 14:15:54.195" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:54.195" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985754, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:54.195" starttime="20180614 14:15:54.194" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:54.196" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:54.196" starttime="20180614 14:15:54.195" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:54.196" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:54.197" starttime="20180614 14:15:54.196" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:54.197" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:54.197" starttime="20180614 14:15:54.197" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:54.198" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:54.198" starttime="20180614 14:15:54.198" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:54.198" starttime="20180614 14:15:54.113" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:55.218" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:55.218" starttime="20180614 14:15:55.218" />
                              </kw>
                              <msg timestamp="20180614 14:15:55.219" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:55.219" starttime="20180614 14:15:55.216" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:55.222" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:55.222" starttime="20180614 14:15:55.221" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:55.223" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:55.223" starttime="20180614 14:15:55.223" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:55.230" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:55.231" starttime="20180614 14:15:55.225" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:55.231" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:55.231" starttime="20180614 14:15:55.224" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:55.233" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985755,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:55.233" starttime="20180614 14:15:55.232" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:55.233" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:55.233" starttime="20180614 14:15:55.233" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:55.234" starttime="20180614 14:15:55.234" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:55.235" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:55.235" starttime="20180614 14:15:55.234" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:55.236" starttime="20180614 14:15:55.235" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:55.236" starttime="20180614 14:15:55.231" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:55.237" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:55.237" starttime="20180614 14:15:55.237" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:55.237" starttime="20180614 14:15:55.236" />
                              </kw>
                              <msg timestamp="20180614 14:15:55.238" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985755,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:55.238" starttime="20180614 14:15:55.220" />
                           </kw>
                           <msg timestamp="20180614 14:15:55.238" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985755,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:55.238" starttime="20180614 14:15:55.215" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:55.239" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985755,"status":200}</msg>
                           <msg timestamp="20180614 14:15:55.239" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:55.239" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985755, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:55.239" starttime="20180614 14:15:55.239" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:55.240" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:55.240" starttime="20180614 14:15:55.240" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:55.241" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:55.241" starttime="20180614 14:15:55.240" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:55.241" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:55.242" starttime="20180614 14:15:55.241" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:55.242" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:55.243" starttime="20180614 14:15:55.242" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:55.243" starttime="20180614 14:15:55.199" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:56.259" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:56.259" starttime="20180614 14:15:56.258" />
                              </kw>
                              <msg timestamp="20180614 14:15:56.260" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:56.260" starttime="20180614 14:15:56.257" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:56.263" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:56.263" starttime="20180614 14:15:56.263" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:56.264" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:56.264" starttime="20180614 14:15:56.264" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:56.273" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:56.273" starttime="20180614 14:15:56.266" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:56.273" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:56.273" starttime="20180614 14:15:56.265" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:56.275" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985756,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:56.275" starttime="20180614 14:15:56.274" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:56.276" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:56.276" starttime="20180614 14:15:56.275" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:56.276" starttime="20180614 14:15:56.276" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:56.277" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:56.277" starttime="20180614 14:15:56.277" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:56.278" starttime="20180614 14:15:56.278" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:56.279" starttime="20180614 14:15:56.273" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:56.280" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:56.280" starttime="20180614 14:15:56.279" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:56.280" starttime="20180614 14:15:56.279" />
                              </kw>
                              <msg timestamp="20180614 14:15:56.280" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985756,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:56.280" starttime="20180614 14:15:56.260" />
                           </kw>
                           <msg timestamp="20180614 14:15:56.281" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985756,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:56.281" starttime="20180614 14:15:56.256" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:56.282" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985756,"status":200}</msg>
                           <msg timestamp="20180614 14:15:56.282" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:56.282" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985756, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:56.282" starttime="20180614 14:15:56.281" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:56.283" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:56.283" starttime="20180614 14:15:56.282" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:56.283" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:56.283" starttime="20180614 14:15:56.283" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:56.284" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:56.284" starttime="20180614 14:15:56.284" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:56.285" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:56.285" starttime="20180614 14:15:56.284" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:56.285" starttime="20180614 14:15:56.244" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:57.297" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:57.297" starttime="20180614 14:15:57.297" />
                              </kw>
                              <msg timestamp="20180614 14:15:57.298" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:57.298" starttime="20180614 14:15:57.296" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:57.300" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:57.300" starttime="20180614 14:15:57.299" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:57.300" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:57.301" starttime="20180614 14:15:57.300" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:57.306" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:57.306" starttime="20180614 14:15:57.302" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:57.306" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:57.306" starttime="20180614 14:15:57.301" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:57.308" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985757,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:57.308" starttime="20180614 14:15:57.307" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:57.309" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:57.309" starttime="20180614 14:15:57.308" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:57.309" starttime="20180614 14:15:57.309" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:57.310" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:57.310" starttime="20180614 14:15:57.310" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:57.311" starttime="20180614 14:15:57.311" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:57.311" starttime="20180614 14:15:57.307" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:57.312" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:57.312" starttime="20180614 14:15:57.312" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:57.313" starttime="20180614 14:15:57.312" />
                              </kw>
                              <msg timestamp="20180614 14:15:57.313" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985757,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:57.313" starttime="20180614 14:15:57.298" />
                           </kw>
                           <msg timestamp="20180614 14:15:57.313" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985757,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:57.313" starttime="20180614 14:15:57.295" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:57.314" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985757,"status":200}</msg>
                           <msg timestamp="20180614 14:15:57.314" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:57.314" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985757, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:57.314" starttime="20180614 14:15:57.314" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:57.315" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:57.315" starttime="20180614 14:15:57.315" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:57.316" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:57.316" starttime="20180614 14:15:57.315" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:57.317" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:57.317" starttime="20180614 14:15:57.316" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:57.317" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:57.318" starttime="20180614 14:15:57.317" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:57.318" starttime="20180614 14:15:57.286" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:58.329" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:58.329" starttime="20180614 14:15:58.329" />
                              </kw>
                              <msg timestamp="20180614 14:15:58.330" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:58.330" starttime="20180614 14:15:58.328" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:58.332" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:58.332" starttime="20180614 14:15:58.331" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:58.332" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:58.332" starttime="20180614 14:15:58.332" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:58.347" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:58.347" starttime="20180614 14:15:58.333" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:58.347" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:58.347" starttime="20180614 14:15:58.333" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:58.349" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985758,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:58.349" starttime="20180614 14:15:58.349" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:58.350" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:58.350" starttime="20180614 14:15:58.349" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:58.351" starttime="20180614 14:15:58.350" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:58.351" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:58.351" starttime="20180614 14:15:58.351" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:58.352" starttime="20180614 14:15:58.352" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:58.352" starttime="20180614 14:15:58.348" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:58.354" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:58.354" starttime="20180614 14:15:58.354" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:58.354" starttime="20180614 14:15:58.353" />
                              </kw>
                              <msg timestamp="20180614 14:15:58.355" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985758,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:58.355" starttime="20180614 14:15:58.330" />
                           </kw>
                           <msg timestamp="20180614 14:15:58.355" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985758,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:58.355" starttime="20180614 14:15:58.327" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:58.356" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985758,"status":200}</msg>
                           <msg timestamp="20180614 14:15:58.356" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:58.356" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985758, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:58.356" starttime="20180614 14:15:58.356" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:58.357" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:58.357" starttime="20180614 14:15:58.356" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:58.358" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:58.358" starttime="20180614 14:15:58.357" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:58.359" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:58.359" starttime="20180614 14:15:58.358" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:58.359" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:58.360" starttime="20180614 14:15:58.359" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:58.360" starttime="20180614 14:15:58.318" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:15:59.371" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:15:59.371" starttime="20180614 14:15:59.371" />
                              </kw>
                              <msg timestamp="20180614 14:15:59.371" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:15:59.371" starttime="20180614 14:15:59.370" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:59.373" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:15:59.373" starttime="20180614 14:15:59.373" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:15:59.374" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:15:59.374" starttime="20180614 14:15:59.374" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:59.386" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:15:59.386" starttime="20180614 14:15:59.375" />
                                 </kw>
                                 <msg timestamp="20180614 14:15:59.386" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:15:59.386" starttime="20180614 14:15:59.374" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:59.388" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985759,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:15:59.388" starttime="20180614 14:15:59.387" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:59.389" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:15:59.389" starttime="20180614 14:15:59.388" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:59.389" starttime="20180614 14:15:59.389" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:15:59.390" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:15:59.390" starttime="20180614 14:15:59.390" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:15:59.391" starttime="20180614 14:15:59.391" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:59.391" starttime="20180614 14:15:59.386" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:15:59.392" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:15:59.393" starttime="20180614 14:15:59.392" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:15:59.393" starttime="20180614 14:15:59.392" />
                              </kw>
                              <msg timestamp="20180614 14:15:59.393" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985759,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:15:59.393" starttime="20180614 14:15:59.372" />
                           </kw>
                           <msg timestamp="20180614 14:15:59.393" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985759,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:15:59.394" starttime="20180614 14:15:59.369" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:59.394" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985759,"status":200}</msg>
                           <msg timestamp="20180614 14:15:59.394" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:15:59.394" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985759, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:15:59.394" starttime="20180614 14:15:59.394" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:59.395" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:59.395" starttime="20180614 14:15:59.395" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:59.396" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:15:59.396" starttime="20180614 14:15:59.396" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:15:59.397" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:15:59.397" starttime="20180614 14:15:59.397" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:15:59.398" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:15:59.398" starttime="20180614 14:15:59.397" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:15:59.398" starttime="20180614 14:15:59.360" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:00.410" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:00.411" starttime="20180614 14:16:00.410" />
                              </kw>
                              <msg timestamp="20180614 14:16:00.411" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:00.411" starttime="20180614 14:16:00.409" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:00.413" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:00.413" starttime="20180614 14:16:00.413" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:00.414" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:00.414" starttime="20180614 14:16:00.413" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:00.427" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:00.427" starttime="20180614 14:16:00.415" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:00.427" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:00.427" starttime="20180614 14:16:00.414" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:00.429" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985760,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:00.429" starttime="20180614 14:16:00.428" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:00.430" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:00.430" starttime="20180614 14:16:00.429" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:00.431" starttime="20180614 14:16:00.430" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:00.431" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:00.431" starttime="20180614 14:16:00.431" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:00.432" starttime="20180614 14:16:00.432" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:00.432" starttime="20180614 14:16:00.427" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:00.433" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:00.434" starttime="20180614 14:16:00.433" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:00.434" starttime="20180614 14:16:00.433" />
                              </kw>
                              <msg timestamp="20180614 14:16:00.434" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985760,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:00.434" starttime="20180614 14:16:00.411" />
                           </kw>
                           <msg timestamp="20180614 14:16:00.434" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985760,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:00.434" starttime="20180614 14:16:00.408" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:00.435" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985760,"status":200}</msg>
                           <msg timestamp="20180614 14:16:00.435" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:00.435" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985760, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:00.435" starttime="20180614 14:16:00.435" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:00.436" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:00.436" starttime="20180614 14:16:00.436" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:00.437" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:00.437" starttime="20180614 14:16:00.436" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:00.438" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:00.438" starttime="20180614 14:16:00.437" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:00.438" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:00.439" starttime="20180614 14:16:00.438" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:00.439" starttime="20180614 14:16:00.399" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:01.450" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:01.450" starttime="20180614 14:16:01.450" />
                              </kw>
                              <msg timestamp="20180614 14:16:01.450" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:01.451" starttime="20180614 14:16:01.449" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:01.452" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:01.452" starttime="20180614 14:16:01.452" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:01.453" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:01.453" starttime="20180614 14:16:01.453" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:01.459" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:01.460" starttime="20180614 14:16:01.454" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:01.460" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:01.460" starttime="20180614 14:16:01.453" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:01.462" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985761,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:01.462" starttime="20180614 14:16:01.461" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:01.463" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:01.463" starttime="20180614 14:16:01.462" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:01.464" starttime="20180614 14:16:01.463" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:01.465" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:01.465" starttime="20180614 14:16:01.464" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:01.466" starttime="20180614 14:16:01.466" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:01.466" starttime="20180614 14:16:01.460" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:01.468" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:01.468" starttime="20180614 14:16:01.467" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:01.468" starttime="20180614 14:16:01.467" />
                              </kw>
                              <msg timestamp="20180614 14:16:01.468" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985761,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:01.468" starttime="20180614 14:16:01.451" />
                           </kw>
                           <msg timestamp="20180614 14:16:01.468" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985761,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:01.469" starttime="20180614 14:16:01.448" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:01.469" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985761,"status":200}</msg>
                           <msg timestamp="20180614 14:16:01.469" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:01.469" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985761, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:01.470" starttime="20180614 14:16:01.469" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:01.470" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:01.470" starttime="20180614 14:16:01.470" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:01.471" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:01.471" starttime="20180614 14:16:01.471" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:01.472" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:01.472" starttime="20180614 14:16:01.471" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:01.473" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:01.473" starttime="20180614 14:16:01.472" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:01.473" starttime="20180614 14:16:01.439" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:02.484" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:02.484" starttime="20180614 14:16:02.484" />
                              </kw>
                              <msg timestamp="20180614 14:16:02.485" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:02.485" starttime="20180614 14:16:02.483" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:02.487" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:02.487" starttime="20180614 14:16:02.486" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:02.487" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:02.488" starttime="20180614 14:16:02.487" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:02.719" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:02.719" starttime="20180614 14:16:02.489" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:02.719" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:02.719" starttime="20180614 14:16:02.488" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:02.721" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985762,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:02.721" starttime="20180614 14:16:02.721" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:02.722" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:02.722" starttime="20180614 14:16:02.721" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:02.723" starttime="20180614 14:16:02.722" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:02.723" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:02.723" starttime="20180614 14:16:02.723" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:02.724" starttime="20180614 14:16:02.724" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:02.724" starttime="20180614 14:16:02.720" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:02.725" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:02.726" starttime="20180614 14:16:02.725" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:02.726" starttime="20180614 14:16:02.725" />
                              </kw>
                              <msg timestamp="20180614 14:16:02.726" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985762,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:02.726" starttime="20180614 14:16:02.485" />
                           </kw>
                           <msg timestamp="20180614 14:16:02.726" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985762,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:02.727" starttime="20180614 14:16:02.482" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:02.727" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985762,"status":200}</msg>
                           <msg timestamp="20180614 14:16:02.727" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:02.727" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985762, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:02.728" starttime="20180614 14:16:02.727" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:02.728" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:02.728" starttime="20180614 14:16:02.728" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:02.729" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:02.729" starttime="20180614 14:16:02.729" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:02.730" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:02.730" starttime="20180614 14:16:02.730" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:02.731" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:02.731" starttime="20180614 14:16:02.730" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:02.731" starttime="20180614 14:16:02.474" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:03.743" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:03.743" starttime="20180614 14:16:03.742" />
                              </kw>
                              <msg timestamp="20180614 14:16:03.743" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:03.743" starttime="20180614 14:16:03.742" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:03.745" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:03.745" starttime="20180614 14:16:03.745" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:03.746" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:03.746" starttime="20180614 14:16:03.746" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:03.760" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:03.760" starttime="20180614 14:16:03.747" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:03.760" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:03.760" starttime="20180614 14:16:03.746" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:03.762" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985763,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:03.762" starttime="20180614 14:16:03.762" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:03.763" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:03.763" starttime="20180614 14:16:03.762" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:03.764" starttime="20180614 14:16:03.763" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:03.764" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:03.765" starttime="20180614 14:16:03.764" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:03.765" starttime="20180614 14:16:03.765" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:03.766" starttime="20180614 14:16:03.761" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:03.767" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:03.767" starttime="20180614 14:16:03.766" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:03.767" starttime="20180614 14:16:03.766" />
                              </kw>
                              <msg timestamp="20180614 14:16:03.767" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985763,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:03.767" starttime="20180614 14:16:03.744" />
                           </kw>
                           <msg timestamp="20180614 14:16:03.768" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985763,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:03.768" starttime="20180614 14:16:03.741" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:03.768" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985763,"status":200}</msg>
                           <msg timestamp="20180614 14:16:03.769" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:03.769" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985763, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:03.769" starttime="20180614 14:16:03.768" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:03.769" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:03.770" starttime="20180614 14:16:03.769" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:03.770" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:03.770" starttime="20180614 14:16:03.770" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:03.771" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:03.771" starttime="20180614 14:16:03.771" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:03.772" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:03.772" starttime="20180614 14:16:03.772" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:03.773" starttime="20180614 14:16:03.732" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:04.792" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:04.793" starttime="20180614 14:16:04.792" />
                              </kw>
                              <msg timestamp="20180614 14:16:04.793" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:04.793" starttime="20180614 14:16:04.791" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:04.796" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:04.796" starttime="20180614 14:16:04.795" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:04.797" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:04.797" starttime="20180614 14:16:04.797" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:04.810" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:04.810" starttime="20180614 14:16:04.798" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:04.810" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:04.810" starttime="20180614 14:16:04.797" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:04.812" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985764,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:04.812" starttime="20180614 14:16:04.812" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:04.813" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:04.813" starttime="20180614 14:16:04.813" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:04.814" starttime="20180614 14:16:04.813" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:04.815" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:04.815" starttime="20180614 14:16:04.814" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:04.815" starttime="20180614 14:16:04.815" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:04.816" starttime="20180614 14:16:04.811" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:04.817" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:04.817" starttime="20180614 14:16:04.817" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:04.817" starttime="20180614 14:16:04.816" />
                              </kw>
                              <msg timestamp="20180614 14:16:04.817" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985764,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:04.817" starttime="20180614 14:16:04.794" />
                           </kw>
                           <msg timestamp="20180614 14:16:04.818" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985764,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:04.818" starttime="20180614 14:16:04.790" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:04.818" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985764,"status":200}</msg>
                           <msg timestamp="20180614 14:16:04.819" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:04.819" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985764, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:04.819" starttime="20180614 14:16:04.818" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:04.820" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:04.820" starttime="20180614 14:16:04.819" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:04.820" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:04.820" starttime="20180614 14:16:04.820" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:04.821" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:04.821" starttime="20180614 14:16:04.821" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:04.822" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:04.822" starttime="20180614 14:16:04.821" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:04.822" starttime="20180614 14:16:04.773" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:05.850" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:05.850" starttime="20180614 14:16:05.849" />
                              </kw>
                              <msg timestamp="20180614 14:16:05.851" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:05.851" starttime="20180614 14:16:05.847" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:05.856" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:05.856" starttime="20180614 14:16:05.855" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:05.858" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:05.858" starttime="20180614 14:16:05.857" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:05.868" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:05.869" starttime="20180614 14:16:05.861" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:05.869" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:05.869" starttime="20180614 14:16:05.859" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:05.873" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985765,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:05.874" starttime="20180614 14:16:05.872" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:05.875" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:05.876" starttime="20180614 14:16:05.874" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:05.879" starttime="20180614 14:16:05.876" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:05.881" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:05.881" starttime="20180614 14:16:05.880" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:05.883" starttime="20180614 14:16:05.882" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:05.883" starttime="20180614 14:16:05.870" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:05.886" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:05.886" starttime="20180614 14:16:05.885" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:05.887" starttime="20180614 14:16:05.884" />
                              </kw>
                              <msg timestamp="20180614 14:16:05.888" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985765,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:05.888" starttime="20180614 14:16:05.852" />
                           </kw>
                           <msg timestamp="20180614 14:16:05.888" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985765,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:05.889" starttime="20180614 14:16:05.845" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:05.890" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985765,"status":200}</msg>
                           <msg timestamp="20180614 14:16:05.891" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:05.891" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985765, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:05.892" starttime="20180614 14:16:05.889" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:05.894" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:05.895" starttime="20180614 14:16:05.893" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:05.897" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:05.898" starttime="20180614 14:16:05.896" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:05.899" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:05.899" starttime="20180614 14:16:05.898" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:05.902" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:05.902" starttime="20180614 14:16:05.900" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:05.903" starttime="20180614 14:16:05.824" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:06.917" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:06.917" starttime="20180614 14:16:06.917" />
                              </kw>
                              <msg timestamp="20180614 14:16:06.917" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:06.917" starttime="20180614 14:16:06.916" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:06.919" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:06.919" starttime="20180614 14:16:06.919" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:06.920" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:06.920" starttime="20180614 14:16:06.920" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:06.943" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:06.944" starttime="20180614 14:16:06.921" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:06.944" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:06.944" starttime="20180614 14:16:06.920" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:06.946" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985766,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:06.946" starttime="20180614 14:16:06.945" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:06.946" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:06.947" starttime="20180614 14:16:06.946" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:06.947" starttime="20180614 14:16:06.947" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:06.948" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:06.948" starttime="20180614 14:16:06.948" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:06.949" starttime="20180614 14:16:06.948" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:06.949" starttime="20180614 14:16:06.944" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:06.950" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:06.950" starttime="20180614 14:16:06.950" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:06.950" starttime="20180614 14:16:06.949" />
                              </kw>
                              <msg timestamp="20180614 14:16:06.951" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985766,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:06.951" starttime="20180614 14:16:06.918" />
                           </kw>
                           <msg timestamp="20180614 14:16:06.951" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985766,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:06.951" starttime="20180614 14:16:06.915" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:06.952" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985766,"status":200}</msg>
                           <msg timestamp="20180614 14:16:06.952" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:06.952" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985766, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:06.952" starttime="20180614 14:16:06.952" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:06.953" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:06.953" starttime="20180614 14:16:06.952" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:06.954" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:06.954" starttime="20180614 14:16:06.953" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:06.954" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:06.954" starttime="20180614 14:16:06.954" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:06.955" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:06.955" starttime="20180614 14:16:06.955" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:06.956" starttime="20180614 14:16:06.903" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:07.967" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:07.967" starttime="20180614 14:16:07.966" />
                              </kw>
                              <msg timestamp="20180614 14:16:07.967" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:07.967" starttime="20180614 14:16:07.966" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:07.969" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:07.969" starttime="20180614 14:16:07.969" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:07.970" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:07.970" starttime="20180614 14:16:07.969" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:07.983" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:07.983" starttime="20180614 14:16:07.971" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:07.984" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:07.984" starttime="20180614 14:16:07.970" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:07.985" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985767,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:07.985" starttime="20180614 14:16:07.985" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:07.986" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:07.986" starttime="20180614 14:16:07.986" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:07.987" starttime="20180614 14:16:07.986" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:07.988" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:07.988" starttime="20180614 14:16:07.987" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:07.989" starttime="20180614 14:16:07.988" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:07.989" starttime="20180614 14:16:07.984" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:07.990" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:07.990" starttime="20180614 14:16:07.990" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:07.990" starttime="20180614 14:16:07.989" />
                              </kw>
                              <msg timestamp="20180614 14:16:07.990" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985767,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:07.991" starttime="20180614 14:16:07.968" />
                           </kw>
                           <msg timestamp="20180614 14:16:07.991" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985767,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:07.991" starttime="20180614 14:16:07.965" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:07.992" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985767,"status":200}</msg>
                           <msg timestamp="20180614 14:16:07.992" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:07.992" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985767, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:07.992" starttime="20180614 14:16:07.991" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:07.993" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:07.993" starttime="20180614 14:16:07.992" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:07.994" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:07.994" starttime="20180614 14:16:07.993" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:07.994" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:07.994" starttime="20180614 14:16:07.994" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:07.995" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:07.995" starttime="20180614 14:16:07.995" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:07.996" starttime="20180614 14:16:07.956" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:09.007" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:09.007" starttime="20180614 14:16:09.007" />
                              </kw>
                              <msg timestamp="20180614 14:16:09.008" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:09.008" starttime="20180614 14:16:09.006" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:09.009" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:09.010" starttime="20180614 14:16:09.009" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:09.010" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:09.010" starttime="20180614 14:16:09.010" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:09.036" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:09.036" starttime="20180614 14:16:09.011" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:09.037" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:09.037" starttime="20180614 14:16:09.011" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:09.038" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985769,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:09.038" starttime="20180614 14:16:09.038" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:09.039" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:09.039" starttime="20180614 14:16:09.039" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:09.040" starttime="20180614 14:16:09.039" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:09.041" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:09.041" starttime="20180614 14:16:09.040" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:09.042" starttime="20180614 14:16:09.041" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:09.042" starttime="20180614 14:16:09.037" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:09.043" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:09.043" starttime="20180614 14:16:09.043" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:09.043" starttime="20180614 14:16:09.042" />
                              </kw>
                              <msg timestamp="20180614 14:16:09.043" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985769,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:09.043" starttime="20180614 14:16:09.008" />
                           </kw>
                           <msg timestamp="20180614 14:16:09.044" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985769,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:09.044" starttime="20180614 14:16:09.005" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:09.045" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985769,"status":200}</msg>
                           <msg timestamp="20180614 14:16:09.045" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:09.045" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985769, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:09.045" starttime="20180614 14:16:09.044" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:09.046" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:09.046" starttime="20180614 14:16:09.045" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:09.047" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:09.047" starttime="20180614 14:16:09.046" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:09.047" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:09.047" starttime="20180614 14:16:09.047" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:09.048" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:09.048" starttime="20180614 14:16:09.048" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:09.049" starttime="20180614 14:16:08.996" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:10.060" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:10.060" starttime="20180614 14:16:10.060" />
                              </kw>
                              <msg timestamp="20180614 14:16:10.061" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:10.061" starttime="20180614 14:16:10.059" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:10.062" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:10.063" starttime="20180614 14:16:10.062" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:10.063" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:10.063" starttime="20180614 14:16:10.063" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:10.073" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:10.074" starttime="20180614 14:16:10.064" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:10.074" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:10.074" starttime="20180614 14:16:10.064" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:10.075" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985770,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:10.076" starttime="20180614 14:16:10.075" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:10.076" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:10.076" starttime="20180614 14:16:10.076" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:10.077" starttime="20180614 14:16:10.077" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:10.078" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:10.078" starttime="20180614 14:16:10.078" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:10.079" starttime="20180614 14:16:10.079" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:10.079" starttime="20180614 14:16:10.074" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:10.080" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:10.080" starttime="20180614 14:16:10.080" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:10.081" starttime="20180614 14:16:10.080" />
                              </kw>
                              <msg timestamp="20180614 14:16:10.081" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985770,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:10.081" starttime="20180614 14:16:10.061" />
                           </kw>
                           <msg timestamp="20180614 14:16:10.081" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985770,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:10.081" starttime="20180614 14:16:10.058" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:10.082" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985770,"status":200}</msg>
                           <msg timestamp="20180614 14:16:10.082" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:10.082" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985770, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:10.082" starttime="20180614 14:16:10.082" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:10.083" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:10.083" starttime="20180614 14:16:10.083" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:10.084" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:10.084" starttime="20180614 14:16:10.083" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:10.084" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:10.085" starttime="20180614 14:16:10.084" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:10.085" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:10.085" starttime="20180614 14:16:10.085" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:10.086" starttime="20180614 14:16:10.050" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:11.097" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:11.097" starttime="20180614 14:16:11.096" />
                              </kw>
                              <msg timestamp="20180614 14:16:11.097" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:11.097" starttime="20180614 14:16:11.096" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:11.099" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:11.099" starttime="20180614 14:16:11.099" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:11.100" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:11.100" starttime="20180614 14:16:11.099" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:11.237" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:11.237" starttime="20180614 14:16:11.101" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:11.237" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:11.237" starttime="20180614 14:16:11.100" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:11.239" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985771,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:11.239" starttime="20180614 14:16:11.239" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:11.240" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:11.240" starttime="20180614 14:16:11.240" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:11.241" starttime="20180614 14:16:11.241" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:11.242" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:11.242" starttime="20180614 14:16:11.241" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:11.243" starttime="20180614 14:16:11.242" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:11.243" starttime="20180614 14:16:11.238" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:11.244" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:11.244" starttime="20180614 14:16:11.244" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:11.244" starttime="20180614 14:16:11.243" />
                              </kw>
                              <msg timestamp="20180614 14:16:11.245" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985771,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:11.245" starttime="20180614 14:16:11.098" />
                           </kw>
                           <msg timestamp="20180614 14:16:11.245" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985771,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:11.245" starttime="20180614 14:16:11.095" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:11.246" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985771,"status":200}</msg>
                           <msg timestamp="20180614 14:16:11.246" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:11.246" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985771, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:11.246" starttime="20180614 14:16:11.245" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:11.247" level="INFO">${value} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:11.247" starttime="20180614 14:16:11.246" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:11.248" level="INFO">${value} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:11.248" starttime="20180614 14:16:11.247" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:11.248" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:11.248" starttime="20180614 14:16:11.248" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:16:11.249" starttime="20180614 14:16:11.249" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:16:11.249" starttime="20180614 14:16:11.086" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:16:11.249" starttime="20180614 14:15:54.113" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:11.249" starttime="20180614 14:15:54.112" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:11.250" starttime="20180614 14:15:53.951" />
            </kw>
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_write_end_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:11.250" level="INFO">${config_datastore_write_end_time} = 2018-06-14 14:16:11.250</msg>
               <status status="PASS" endtime="20180614 14:16:11.250" starttime="20180614 14:16:11.250" />
            </kw>
            <kw name="Subtract Date From Date" library="DateTime">
               <doc>Subtracts date from another date and returns time between.</doc>
               <arguments>
                  <arg>${config_datastore_write_end_time}</arg>
                  <arg>${config_datastore_write_start_time}</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_write_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:11.254" level="INFO">${config_datastore_write_time} = 17.307</msg>
               <status status="PASS" endtime="20180614 14:16:11.254" starttime="20180614 14:16:11.251" />
            </kw>
            <kw name="Evaluate" library="BuiltIn">
               <doc>Evaluates the given expression in Python and returns the results.</doc>
               <arguments>
                  <arg>${flow_count_after_add} / ${config_datastore_write_time}</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_write_rate}</var>
               </assign>
               <msg timestamp="20180614 14:16:11.255" level="INFO">${config_datastore_write_rate} = 5778.00889813</msg>
               <status status="PASS" endtime="20180614 14:16:11.255" starttime="20180614 14:16:11.254" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${config_datastore_write_start_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:11.256" level="INFO">${config_datastore_write_start_time} = 2018-06-14 14:15:53.943</msg>
               <status status="PASS" endtime="20180614 14:16:11.256" starttime="20180614 14:16:11.255" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>${
}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:11.257" starttime="20180614 14:16:11.256" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The config_datastore_write_time is ${config_datastore_write_time}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:11.257" starttime="20180614 14:16:11.257" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The config_datastore_write_rate is ${config_datastore_write_rate}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:11.258" starttime="20180614 14:16:11.258" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${config_datastore_write_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:11.259" level="INFO">${config_datastore_write_time} = 17.307</msg>
               <status status="PASS" endtime="20180614 14:16:11.259" starttime="20180614 14:16:11.258" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${config_datastore_write_rate}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:11.259" level="INFO">${config_datastore_write_rate} = 5778.00889813</msg>
               <status status="PASS" endtime="20180614 14:16:11.260" starttime="20180614 14:16:11.259" />
            </kw>
            <doc>100K Flows (1K Flows per DPN) in 100 DPN added and verify it gets applied.</doc>
            <status status="PASS" endtime="20180614 14:16:11.260" critical="no" starttime="20180614 14:15:53.942" />
         </test>
         <test id="s1-s1-t4" name="Verify Flows In Switch">
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${Mininet_write_start_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:11.262" level="INFO">${Mininet_write_start_time} = 2018-06-14 14:16:11.262</msg>
               <status status="PASS" endtime="20180614 14:16:11.262" starttime="20180614 14:16:11.262" />
            </kw>
            <kw name="Verify Aggregate Flow From Mininet Session" library="MininetKeywords">
               <doc>Verify flow count per switch</doc>
               <arguments>
                  <arg>${mininet_conn_id}</arg>
                  <arg>${flow_count_after_add}</arg>
                  <arg>${operation_timeout}</arg>
               </arguments>
               <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
                  <doc>Runs the specified keyword and retries if it fails.</doc>
                  <arguments>
                     <arg>${time_out}</arg>
                     <arg>2s</arg>
                     <arg>MininetKeywords.Check Flows In Mininet</arg>
                     <arg>${mininet_conn}</arg>
                     <arg>${flow_count}</arg>
                  </arguments>
                  <kw name="Check Flows In Mininet" library="MininetKeywords">
                     <doc>Sync with mininet to match exact number of flows</doc>
                     <arguments>
                        <arg>${mininet_conn}</arg>
                        <arg>${flow_count}</arg>
                     </arguments>
                     <kw name="Run Keyword If" library="BuiltIn">
                        <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                        <arguments>
                           <arg>"""${mininet_conn}""" != ""</arg>
                           <arg>SSHLibrary.Switch Connection</arg>
                           <arg>${mininet_conn}</arg>
                        </arguments>
                        <kw name="Switch Connection" library="SSHLibrary">
                           <doc>Switches the active connection by index or alias.</doc>
                           <arguments>
                              <arg>${mininet_conn}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:16:11.266" starttime="20180614 14:16:11.266" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:16:11.266" starttime="20180614 14:16:11.265" />
                     </kw>
                     <kw name="Set Variable" library="BuiltIn">
                        <doc>Returns the given values which can then be assigned to a variables.</doc>
                        <arguments>
                           <arg>dpctl dump-aggregate -O OpenFlow13</arg>
                        </arguments>
                        <assign>
                           <var>${cmd}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:11.267" level="INFO">${cmd} = dpctl dump-aggregate -O OpenFlow13</msg>
                        <status status="PASS" endtime="20180614 14:16:11.267" starttime="20180614 14:16:11.266" />
                     </kw>
                     <kw name="Send Mininet Command" library="MininetKeywords">
                        <doc>Sends Command dpctl dump-aggregate -O OpenFlow13 to Mininet session 7 and returns read buffer response.</doc>
                        <arguments>
                           <arg>${mininet_conn}</arg>
                           <arg>${cmd}</arg>
                        </arguments>
                        <assign>
                           <var>${output}</var>
                        </assign>
                        <kw name="Run Keyword If" library="BuiltIn">
                           <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                           <arguments>
                              <arg>"""${mininet_conn}""" != ""</arg>
                              <arg>SSHLibrary.Switch Connection</arg>
                              <arg>${mininet_conn}</arg>
                           </arguments>
                           <kw name="Switch Connection" library="SSHLibrary">
                              <doc>Switches the active connection by index or alias.</doc>
                              <arguments>
                                 <arg>${mininet_conn}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:16:11.269" starttime="20180614 14:16:11.269" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:16:11.269" starttime="20180614 14:16:11.268" />
                        </kw>
                        <kw name="Write" library="SSHLibrary">
                           <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                           <arguments>
                              <arg>${cmd}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:11.274" level="INFO">dpctl dump-aggregate -O OpenFlow13</msg>
                           <status status="PASS" endtime="20180614 14:16:11.274" starttime="20180614 14:16:11.270" />
                        </kw>
                        <kw name="Read Until" library="SSHLibrary">
                           <doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
                           <arguments>
                              <arg>mininet&gt;</arg>
                           </arguments>
                           <assign>
                              <var>${output}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:11.467" level="INFO">*** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s3 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s4 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s5 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s6 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s7 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s8 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s9 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s10 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s11 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s12 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s13 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s14 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s15 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s16 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s17 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s18 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s19 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s20 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s21 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s22 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s23 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s24 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s25 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s26 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s27 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s28 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=0
*** s29 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s30 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s31 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s32 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=0
mininet&gt;</msg>
                           <msg timestamp="20180614 14:16:11.468" level="INFO">${output} = *** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 -------------------------...</msg>
                           <status status="PASS" endtime="20180614 14:16:11.468" starttime="20180614 14:16:11.274" />
                        </kw>
                        <msg timestamp="20180614 14:16:11.468" level="INFO">${output} = *** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 -------------------------...</msg>
                        <status status="PASS" endtime="20180614 14:16:11.469" starttime="20180614 14:16:11.267" />
                     </kw>
                     <kw name="Get Regexp Matches" library="String">
                        <doc>Returns a list of all non-overlapping matches in the given string.</doc>
                        <arguments>
                           <arg>${output}</arg>
                           <arg>(?&lt;=flow_count\=).*?(?=
)</arg>
                        </arguments>
                        <assign>
                           <var>${flows}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:11.470" level="INFO">${flows} = [u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u...</msg>
                        <status status="PASS" endtime="20180614 14:16:11.470" starttime="20180614 14:16:11.469" />
                     </kw>
                     <kw name="Evaluate" library="BuiltIn">
                        <doc>Evaluates the given expression in Python and returns the results.</doc>
                        <arguments>
                           <arg>sum(map(int, ${flows}))</arg>
                        </arguments>
                        <assign>
                           <var>${total_flows}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:11.471" level="INFO">${total_flows} = 93750</msg>
                        <status status="PASS" endtime="20180614 14:16:11.471" starttime="20180614 14:16:11.470" />
                     </kw>
                     <kw name="Should Be Equal As Numbers" library="BuiltIn">
                        <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                        <arguments>
                           <arg>${total_flows}</arg>
                           <arg>${flow_count}</arg>
                        </arguments>
                        <msg timestamp="20180614 14:16:11.472" level="FAIL">93750.0 != 100000.0</msg>
                        <status status="FAIL" endtime="20180614 14:16:11.472" starttime="20180614 14:16:11.471" />
                     </kw>
                     <status status="FAIL" endtime="20180614 14:16:11.472" starttime="20180614 14:16:11.264" />
                  </kw>
                  <kw name="Check Flows In Mininet" library="MininetKeywords">
                     <doc>Sync with mininet to match exact number of flows</doc>
                     <arguments>
                        <arg>${mininet_conn}</arg>
                        <arg>${flow_count}</arg>
                     </arguments>
                     <kw name="Run Keyword If" library="BuiltIn">
                        <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                        <arguments>
                           <arg>"""${mininet_conn}""" != ""</arg>
                           <arg>SSHLibrary.Switch Connection</arg>
                           <arg>${mininet_conn}</arg>
                        </arguments>
                        <kw name="Switch Connection" library="SSHLibrary">
                           <doc>Switches the active connection by index or alias.</doc>
                           <arguments>
                              <arg>${mininet_conn}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:16:13.475" starttime="20180614 14:16:13.475" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:16:13.475" starttime="20180614 14:16:13.474" />
                     </kw>
                     <kw name="Set Variable" library="BuiltIn">
                        <doc>Returns the given values which can then be assigned to a variables.</doc>
                        <arguments>
                           <arg>dpctl dump-aggregate -O OpenFlow13</arg>
                        </arguments>
                        <assign>
                           <var>${cmd}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:13.476" level="INFO">${cmd} = dpctl dump-aggregate -O OpenFlow13</msg>
                        <status status="PASS" endtime="20180614 14:16:13.476" starttime="20180614 14:16:13.476" />
                     </kw>
                     <kw name="Send Mininet Command" library="MininetKeywords">
                        <doc>Sends Command dpctl dump-aggregate -O OpenFlow13 to Mininet session 7 and returns read buffer response.</doc>
                        <arguments>
                           <arg>${mininet_conn}</arg>
                           <arg>${cmd}</arg>
                        </arguments>
                        <assign>
                           <var>${output}</var>
                        </assign>
                        <kw name="Run Keyword If" library="BuiltIn">
                           <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                           <arguments>
                              <arg>"""${mininet_conn}""" != ""</arg>
                              <arg>SSHLibrary.Switch Connection</arg>
                              <arg>${mininet_conn}</arg>
                           </arguments>
                           <kw name="Switch Connection" library="SSHLibrary">
                              <doc>Switches the active connection by index or alias.</doc>
                              <arguments>
                                 <arg>${mininet_conn}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:16:13.478" starttime="20180614 14:16:13.478" />
                           </kw>
                           <status status="PASS" endtime="20180614 14:16:13.478" starttime="20180614 14:16:13.477" />
                        </kw>
                        <kw name="Write" library="SSHLibrary">
                           <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                           <arguments>
                              <arg>${cmd}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:13.481" level="INFO">dpctl dump-aggregate -O OpenFlow13</msg>
                           <status status="PASS" endtime="20180614 14:16:13.481" starttime="20180614 14:16:13.478" />
                        </kw>
                        <kw name="Read Until" library="SSHLibrary">
                           <doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
                           <arguments>
                              <arg>mininet&gt;</arg>
                           </arguments>
                           <assign>
                              <var>${output}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:13.649" level="INFO">*** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s3 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s4 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s5 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s6 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s7 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s8 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s9 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s10 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s11 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s12 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s13 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s14 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s15 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s16 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s17 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s18 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s19 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s20 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s21 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s22 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s23 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s24 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s25 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s26 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s27 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s28 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s29 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s30 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s31 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s32 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
mininet&gt;</msg>
                           <msg timestamp="20180614 14:16:13.650" level="INFO">${output} = *** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 -------------------------...</msg>
                           <status status="PASS" endtime="20180614 14:16:13.650" starttime="20180614 14:16:13.482" />
                        </kw>
                        <msg timestamp="20180614 14:16:13.650" level="INFO">${output} = *** s1 ------------------------------------------------------------------------
OFPST_AGGREGATE reply (OF1.3) (xid=0x2): packet_count=0 byte_count=0 flow_count=3125
*** s2 -------------------------...</msg>
                        <status status="PASS" endtime="20180614 14:16:13.650" starttime="20180614 14:16:13.476" />
                     </kw>
                     <kw name="Get Regexp Matches" library="String">
                        <doc>Returns a list of all non-overlapping matches in the given string.</doc>
                        <arguments>
                           <arg>${output}</arg>
                           <arg>(?&lt;=flow_count\=).*?(?=
)</arg>
                        </arguments>
                        <assign>
                           <var>${flows}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:13.651" level="INFO">${flows} = [u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u'3125', u...</msg>
                        <status status="PASS" endtime="20180614 14:16:13.651" starttime="20180614 14:16:13.651" />
                     </kw>
                     <kw name="Evaluate" library="BuiltIn">
                        <doc>Evaluates the given expression in Python and returns the results.</doc>
                        <arguments>
                           <arg>sum(map(int, ${flows}))</arg>
                        </arguments>
                        <assign>
                           <var>${total_flows}</var>
                        </assign>
                        <msg timestamp="20180614 14:16:13.652" level="INFO">${total_flows} = 100000</msg>
                        <status status="PASS" endtime="20180614 14:16:13.652" starttime="20180614 14:16:13.652" />
                     </kw>
                     <kw name="Should Be Equal As Numbers" library="BuiltIn">
                        <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                        <arguments>
                           <arg>${total_flows}</arg>
                           <arg>${flow_count}</arg>
                        </arguments>
                        <status status="PASS" endtime="20180614 14:16:13.653" starttime="20180614 14:16:13.653" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:16:13.654" starttime="20180614 14:16:13.473" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:13.654" starttime="20180614 14:16:11.263" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:13.654" starttime="20180614 14:16:11.263" />
            </kw>
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${Mininet_write_end_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:13.655" level="INFO">${Mininet_write_end_time} = 2018-06-14 14:16:13.654</msg>
               <status status="PASS" endtime="20180614 14:16:13.655" starttime="20180614 14:16:13.654" />
            </kw>
            <kw name="Subtract Date From Date" library="DateTime">
               <doc>Subtracts date from another date and returns time between.</doc>
               <arguments>
                  <arg>${Mininet_write_end_time}</arg>
                  <arg>${config_datastore_write_start_time}</arg>
               </arguments>
               <assign>
                  <var>${Mininet_write_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:13.656" level="INFO">${Mininet_write_time} = 19.711</msg>
               <status status="PASS" endtime="20180614 14:16:13.656" starttime="20180614 14:16:13.655" />
            </kw>
            <kw name="Evaluate" library="BuiltIn">
               <doc>Evaluates the given expression in Python and returns the results.</doc>
               <arguments>
                  <arg>${flow_count_after_add} / ${Mininet_write_time}</arg>
               </arguments>
               <assign>
                  <var>${Mininet_write_rate}</var>
               </assign>
               <msg timestamp="20180614 14:16:13.656" level="INFO">${Mininet_write_rate} = 5073.30931967</msg>
               <status status="PASS" endtime="20180614 14:16:13.656" starttime="20180614 14:16:13.656" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>${
}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:13.657" starttime="20180614 14:16:13.657" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The Mininet_write_time is ${Mininet_write_time}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:13.658" starttime="20180614 14:16:13.657" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The Mininet_write_rate is ${Mininet_write_rate}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:13.659" starttime="20180614 14:16:13.658" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${Mininet_write_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:13.659" level="INFO">${Mininet_write_time} = 19.711</msg>
               <status status="PASS" endtime="20180614 14:16:13.659" starttime="20180614 14:16:13.659" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${Mininet_write_rate}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:13.660" level="INFO">${Mininet_write_rate} = 5073.30931967</msg>
               <status status="PASS" endtime="20180614 14:16:13.660" starttime="20180614 14:16:13.660" />
            </kw>
            <doc>Verify 100K flows are installed in 100 switches.</doc>
            <status status="PASS" endtime="20180614 14:16:13.660" critical="no" starttime="20180614 14:16:11.261" />
         </test>
         <test id="s1-s1-t5" name="Verify Flows In Oper DS">
            <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
               <doc>Runs the specified keyword and retries if it fails.</doc>
               <arguments>
                  <arg>${oper_ds_timeout}</arg>
                  <arg>2s</arg>
                  <arg>ClusterOpenFlow.Check_Flows_Operational_Datastore_On_Member</arg>
                  <arg>${flow_count_after_add}</arg>
                  <arg>1</arg>
               </arguments>
               <kw name="Check Flows Operational Datastore On Member" library="ClusterOpenFlow">
                  <doc>Check if number of Operational Flows on member of given index is equal to ${flow_count}.</doc>
                  <arguments>
                     <arg>${flow_count_after_add}</arg>
                     <arg>1</arg>
                  </arguments>
                  <kw name="Flow Stats Collected" library="ScaleClient">
                     <doc>Provides the operational inventory counts counts of switches and flows.</doc>
                     <arguments>
                        <arg>controller=${ODL_SYSTEM_${member_index}_IP}</arg>
                     </arguments>
                     <assign>
                        <var>${sw}</var>
                        <var>${reported_flow}</var>
                        <var>${found_flow}</var>
                     </assign>
                     <msg timestamp="20180614 14:16:21.942" level="INFO">Switches,ActiveFlows(reported)/FlowsFound 32 64073 80099</msg>
                     <msg timestamp="20180614 14:16:21.943" level="INFO">${sw} = 32</msg>
                     <msg timestamp="20180614 14:16:21.943" level="INFO">${reported_flow} = 64073</msg>
                     <msg timestamp="20180614 14:16:21.943" level="INFO">${found_flow} = 80099</msg>
                     <status status="PASS" endtime="20180614 14:16:21.943" starttime="20180614 14:16:13.671" />
                  </kw>
                  <kw name="Should Be Equal As Numbers" library="BuiltIn">
                     <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                     <arguments>
                        <arg>${flow_count}</arg>
                        <arg>${found_flow}</arg>
                     </arguments>
                     <msg timestamp="20180614 14:16:21.945" level="FAIL">100000.0 != 80099.0</msg>
                     <status status="FAIL" endtime="20180614 14:16:21.945" starttime="20180614 14:16:21.944" />
                  </kw>
                  <status status="FAIL" endtime="20180614 14:16:21.945" starttime="20180614 14:16:13.670" />
               </kw>
               <kw name="Check Flows Operational Datastore On Member" library="ClusterOpenFlow">
                  <doc>Check if number of Operational Flows on member of given index is equal to ${flow_count}.</doc>
                  <arguments>
                     <arg>${flow_count_after_add}</arg>
                     <arg>1</arg>
                  </arguments>
                  <kw name="Flow Stats Collected" library="ScaleClient">
                     <doc>Provides the operational inventory counts counts of switches and flows.</doc>
                     <arguments>
                        <arg>controller=${ODL_SYSTEM_${member_index}_IP}</arg>
                     </arguments>
                     <assign>
                        <var>${sw}</var>
                        <var>${reported_flow}</var>
                        <var>${found_flow}</var>
                     </assign>
                     <msg timestamp="20180614 14:16:33.637" level="INFO">Switches,ActiveFlows(reported)/FlowsFound 32 79698 100000</msg>
                     <msg timestamp="20180614 14:16:33.637" level="INFO">${sw} = 32</msg>
                     <msg timestamp="20180614 14:16:33.638" level="INFO">${reported_flow} = 79698</msg>
                     <msg timestamp="20180614 14:16:33.638" level="INFO">${found_flow} = 100000</msg>
                     <status status="PASS" endtime="20180614 14:16:33.638" starttime="20180614 14:16:23.956" />
                  </kw>
                  <kw name="Should Be Equal As Numbers" library="BuiltIn">
                     <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                     <arguments>
                        <arg>${flow_count}</arg>
                        <arg>${found_flow}</arg>
                     </arguments>
                     <status status="PASS" endtime="20180614 14:16:33.639" starttime="20180614 14:16:33.638" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:33.639" starttime="20180614 14:16:23.955" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:33.639" starttime="20180614 14:16:13.662" />
            </kw>
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${oper_datastore_write_end_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:33.640" level="INFO">${oper_datastore_write_end_time} = 2018-06-14 14:16:33.640</msg>
               <status status="PASS" endtime="20180614 14:16:33.640" starttime="20180614 14:16:33.639" />
            </kw>
            <kw name="Subtract Date From Date" library="DateTime">
               <doc>Subtracts date from another date and returns time between.</doc>
               <arguments>
                  <arg>${oper_datastore_write_end_time}</arg>
                  <arg>${config_datastore_write_start_time}</arg>
               </arguments>
               <assign>
                  <var>${oper_datastore_write_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:33.641" level="INFO">${oper_datastore_write_time} = 39.697</msg>
               <status status="PASS" endtime="20180614 14:16:33.641" starttime="20180614 14:16:33.640" />
            </kw>
            <kw name="Evaluate" library="BuiltIn">
               <doc>Evaluates the given expression in Python and returns the results.</doc>
               <arguments>
                  <arg>${flow_count_after_add} / ${oper_datastore_write_time}</arg>
               </arguments>
               <assign>
                  <var>${oper_datastore_write_rate}</var>
               </assign>
               <msg timestamp="20180614 14:16:33.642" level="INFO">${oper_datastore_write_rate} = 2519.0820465</msg>
               <status status="PASS" endtime="20180614 14:16:33.642" starttime="20180614 14:16:33.641" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>${
}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:33.642" starttime="20180614 14:16:33.642" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The operational_datastore_write_time is ${oper_datastore_write_time}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:33.643" starttime="20180614 14:16:33.643" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The operational_datastore_write_rate is ${oper_datastore_write_rate}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:33.644" starttime="20180614 14:16:33.644" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${oper_datastore_write_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:33.645" level="INFO">${oper_datastore_write_time} = 39.697</msg>
               <status status="PASS" endtime="20180614 14:16:33.645" starttime="20180614 14:16:33.644" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${oper_datastore_write_rate}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:33.645" level="INFO">${oper_datastore_write_rate} = 2519.0820465</msg>
               <status status="PASS" endtime="20180614 14:16:33.646" starttime="20180614 14:16:33.645" />
            </kw>
            <doc>Check Flows in Operational Datastore</doc>
            <status status="PASS" endtime="20180614 14:16:33.646" critical="no" starttime="20180614 14:16:13.661" />
         </test>
         <test id="s1-s1-t6" name="Stop Mininet And Verify">
            <kw name="Stop Mininet And Exit" library="MininetKeywords">
               <doc>Stops Mininet and exits session ${mininet_conn}</doc>
               <arguments>
                  <arg>${mininet_conn_id}</arg>
               </arguments>
               <kw name="Run Keyword If" library="BuiltIn">
                  <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                  <arguments>
                     <arg>"""${mininet_conn}""" != ""</arg>
                     <arg>SSHLibrary.Switch Connection</arg>
                     <arg>${mininet_conn}</arg>
                  </arguments>
                  <kw name="Switch Connection" library="SSHLibrary">
                     <doc>Switches the active connection by index or alias.</doc>
                     <arguments>
                        <arg>${mininet_conn}</arg>
                     </arguments>
                     <status status="PASS" endtime="20180614 14:16:33.656" starttime="20180614 14:16:33.656" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:33.657" starttime="20180614 14:16:33.655" />
               </kw>
               <kw name="Write" library="SSHLibrary">
                  <doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
                  <arguments>
                     <arg>exit</arg>
                  </arguments>
                  <msg timestamp="20180614 14:16:33.664" level="INFO">exit</msg>
                  <status status="PASS" endtime="20180614 14:16:33.664" starttime="20180614 14:16:33.657" />
               </kw>
               <kw name="Read Until" library="SSHLibrary">
                  <doc>Consumes and returns the server output until ``expected`` is encountered.</doc>
                  <arguments>
                     <arg>${TOOLS_SYSTEM_PROMPT}</arg>
                  </arguments>
                  <msg timestamp="20180614 14:16:35.671" level="INFO">*** Stopping 0 controllers

*** Stopping 63 links
...............................................................
*** Stopping 32 switches
s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 s16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 s32 
*** Stopping 32 hosts
h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11 h12 h13 h14 h15 h16 h17 h18 h19 h20 h21 h22 h23 h24 h25 h26 h27 h28 h29 h30 h31 h32 
*** Done
completed in 53.814 seconds
[jenkins@releng-56341-274-1-mininet-ovs-28-0 ~]&gt;</msg>
                  <status status="PASS" endtime="20180614 14:16:35.671" starttime="20180614 14:16:33.665" />
               </kw>
               <kw name="Close Connection" library="SSHLibrary">
                  <doc>Closes the current connection.</doc>
                  <status status="PASS" endtime="20180614 14:16:35.673" starttime="20180614 14:16:35.671" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:35.673" starttime="20180614 14:16:33.655" />
            </kw>
            <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
               <doc>Runs the specified keyword and retries if it fails.</doc>
               <arguments>
                  <arg>${mininet_timeout}</arg>
                  <arg>2s</arg>
                  <arg>ClusterOpenFlow.Verify_Switch_Connections_Running_On_Member</arg>
                  <arg>0</arg>
                  <arg>1</arg>
               </arguments>
               <kw name="Verify Switch Connections Running On Member" library="ClusterOpenFlow">
                  <doc>Check if number of Switch connections on member of given index is equal to 32.</doc>
                  <arguments>
                     <arg>0</arg>
                     <arg>1</arg>
                  </arguments>
                  <kw name="Get Switches Count" library="ScaleClient">
                     <doc>Gives the count of the switches presnt in the operational inventory nodes datastore.</doc>
                     <arguments>
                        <arg>controller=${ODL_SYSTEM_${member_index}_IP}</arg>
                     </arguments>
                     <assign>
                        <var>${count}</var>
                     </assign>
                     <msg timestamp="20180614 14:16:35.682" level="INFO">${count} = 0</msg>
                     <status status="PASS" endtime="20180614 14:16:35.683" starttime="20180614 14:16:35.675" />
                  </kw>
                  <kw name="Should Be Equal As Numbers" library="BuiltIn">
                     <doc>Fails if objects are unequal after converting them to real numbers.</doc>
                     <arguments>
                        <arg>${switch_count}</arg>
                        <arg>${count}</arg>
                     </arguments>
                     <msg timestamp="20180614 14:16:35.683" level="INFO">Argument types are:
&lt;type 'unicode'&gt;
&lt;type 'int'&gt;</msg>
                     <status status="PASS" endtime="20180614 14:16:35.683" starttime="20180614 14:16:35.683" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:35.684" starttime="20180614 14:16:35.674" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:35.684" starttime="20180614 14:16:35.674" />
            </kw>
            <doc>Stop mininet and exit connection.</doc>
            <status status="PASS" endtime="20180614 14:16:35.684" critical="no" starttime="20180614 14:16:33.646" />
         </test>
         <test id="s1-s1-t7" name="Delete All Flows">
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_delete_start_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:35.686" level="INFO">${config_datastore_delete_start_time} = 2018-06-14 14:16:35.686</msg>
               <status status="PASS" endtime="20180614 14:16:35.686" starttime="20180614 14:16:35.685" />
            </kw>
            <kw name="Delete Bulk Flow In Node" library="BulkomaticKeywords">
               <doc>Delete Bulk Flow in member ${controller_index} and wait until operation is completed.</doc>
               <arguments>
                  <arg>${temp_json_config_del}</arg>
                  <arg>1</arg>
                  <arg>${operation_timeout}</arg>
               </arguments>
               <kw name="Delete Bulk Flow" library="BulkomaticKeywords">
                  <doc>Delete Bulk Flow in member 1 according to ${json_body_del}.</doc>
                  <arguments>
                     <arg>${json_body_del}</arg>
                     <arg>${controller_index}</arg>
                  </arguments>
                  <kw name="Post_As_Json_To_Member" library="ClusterManagement">
                     <doc>Send a POST with the supplied uri and data to member ${member_index}.</doc>
                     <arguments>
                        <arg>${ADD_BULK_CONFIG_NODES_API}</arg>
                        <arg>${json_body_del}</arg>
                        <arg>${controller_index}</arg>
                     </arguments>
                     <assign>
                        <var>${resp}</var>
                     </assign>
                     <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                        <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                        <arguments>
                           <arg>member_index=${member_index}</arg>
                        </arguments>
                        <assign>
                           <var>${session}</var>
                        </assign>
                        <kw name="Set Variable" library="BuiltIn">
                           <doc>Returns the given values which can then be assigned to a variables.</doc>
                           <arguments>
                              <arg>ClusterManagement__session_${member_index}</arg>
                           </arguments>
                           <assign>
                              <var>${session}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:35.705" level="INFO">${session} = ClusterManagement__session_1</msg>
                           <status status="PASS" endtime="20180614 14:16:35.705" starttime="20180614 14:16:35.704" />
                        </kw>
                        <msg timestamp="20180614 14:16:35.705" level="INFO">${session} = ClusterManagement__session_1</msg>
                        <status status="PASS" endtime="20180614 14:16:35.705" starttime="20180614 14:16:35.704" />
                     </kw>
                     <kw name="Post_As_Json_To_Uri" library="TemplatedRequests">
                        <doc>Specify JSON headers and return Post_To_Uri normalized response text.</doc>
                        <arguments>
                           <arg>uri=${uri}</arg>
                           <arg>data=${data}</arg>
                           <arg>session=${session}</arg>
                        </arguments>
                        <assign>
                           <var>${response_text}</var>
                        </assign>
                        <kw name="Post_To_Uri" library="TemplatedRequests">
                           <doc>POST data to given URI, check status code and return response text.</doc>
                           <arguments>
                              <arg>uri=${uri}</arg>
                              <arg>data=${data}</arg>
                              <arg>accept=${ACCEPT_EMPTY}</arg>
                              <arg>content_type=${HEADERS_YANG_JSON}</arg>
                              <arg>session=${session}</arg>
                              <arg>normalize_json=True</arg>
                              <arg>additional_allowed_status_codes=${additional_allowed_status_codes}</arg>
                              <arg>explicit_status_codes=${explicit_status_codes}</arg>
                              <arg>http_timeout=${http_timeout}</arg>
                           </arguments>
                           <assign>
                              <var>${response_text}</var>
                           </assign>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${uri}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:16:35.722" level="INFO">/restconf/operations/sal-bulk-flow:flow-test</msg>
                              <status status="PASS" endtime="20180614 14:16:35.722" starttime="20180614 14:16:35.722" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${data}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:16:35.723" level="INFO">{
"input" :
  {
   "sal-bulk-flow:is-add" : "false",
   "sal-bulk-flow:dpn-count" : "32",
   "sal-bulk-flow:flows-per-dpn" : "3125",
   "sal-bulk-flow:batch-size" : "3125",
   "sal-bulk-flow:seq" : "true",
   "sal-bulk-flow:tx-chain" : "true",
   "sal-bulk-flow:sleep-for" : "0",
   "sal-bulk-flow:sleep-after" : "1",
   "sal-bulk-flow:start-table-id" : "0",
   "sal-bulk-flow:end-table-id" : "1"
  }
}</msg>
                              <status status="PASS" endtime="20180614 14:16:35.723" starttime="20180614 14:16:35.722" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${content_type}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:16:35.723" level="INFO">{u'Content-Type': u'application/yang.data+json'}</msg>
                              <status status="PASS" endtime="20180614 14:16:35.723" starttime="20180614 14:16:35.723" />
                           </kw>
                           <kw name="Log" library="BuiltIn">
                              <doc>Logs the given message with the given level.</doc>
                              <arguments>
                                 <arg>${accept}</arg>
                              </arguments>
                              <msg timestamp="20180614 14:16:35.724" level="INFO">{}</msg>
                              <status status="PASS" endtime="20180614 14:16:35.724" starttime="20180614 14:16:35.724" />
                           </kw>
                           <kw name="Join_Two_Headers" library="TemplatedRequests">
                              <doc>Take two dicts, join them, return result. Second argument values take precedence.</doc>
                              <arguments>
                                 <arg>first=${content_type}</arg>
                                 <arg>second=${accept}</arg>
                              </arguments>
                              <assign>
                                 <var>${headers}</var>
                              </assign>
                              <kw name="Copy Dictionary" library="Collections">
                                 <doc>Returns a copy of the given dictionary.</doc>
                                 <arguments>
                                    <arg>${first}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${accumulator}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:35.726" level="INFO">${accumulator} = {u'Content-Type': u'application/yang.data+json'}</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.726" starttime="20180614 14:16:35.725" />
                              </kw>
                              <kw name="Get Dictionary Items" library="Collections">
                                 <doc>Returns items of the given ``dictionary``.</doc>
                                 <arguments>
                                    <arg>${second}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${items_to_add}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:35.726" level="INFO">${items_to_add} = []</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.726" starttime="20180614 14:16:35.726" />
                              </kw>
                              <kw name="Set To Dictionary" library="Collections">
                                 <doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
                                 <arguments>
                                    <arg>${accumulator}</arg>
                                    <arg>@{items_to_add}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:16:35.727" starttime="20180614 14:16:35.727" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accumulator}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.728" level="INFO">{u'Content-Type': u'application/yang.data+json'}</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.728" starttime="20180614 14:16:35.727" />
                              </kw>
                              <msg timestamp="20180614 14:16:35.728" level="INFO">${headers} = {u'Content-Type': u'application/yang.data+json'}</msg>
                              <status status="PASS" endtime="20180614 14:16:35.728" starttime="20180614 14:16:35.724" />
                           </kw>
                           <kw name="Run Keyword If" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                              <arguments>
                                 <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                 <arg>RequestsLibrary.Post_Request</arg>
                                 <arg>alias=${session}</arg>
                                 <arg>uri=${uri}</arg>
                                 <arg>data=${data}</arg>
                                 <arg>headers=${headers}</arg>
                                 <arg>ELSE</arg>
                                 <arg>RequestsLibrary.Post_Request</arg>
                                 <arg>alias=${session}</arg>
                                 <arg>uri=${uri}</arg>
                                 <arg>data=${data}</arg>
                                 <arg>headers=${headers}</arg>
                                 <arg>timeout=${http_timeout}</arg>
                              </arguments>
                              <assign>
                                 <var>${response}</var>
                              </assign>
                              <kw name="Post Request" library="RequestsLibrary">
                                 <doc>Send a POST request on the session object found using the</doc>
                                 <arguments>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>data=${data}</arg>
                                    <arg>headers=${headers}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.743" level="INFO">Post Request using : alias=ClusterManagement__session_1, uri=/restconf/operations/sal-bulk-flow:flow-test, data=&lt;application/yang.data+json&gt;, headers={u'Content-Type': u'application/yang.data+json'}, files=None, allow_redirects=True</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.743" starttime="20180614 14:16:35.729" />
                              </kw>
                              <msg timestamp="20180614 14:16:35.743" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                              <status status="PASS" endtime="20180614 14:16:35.743" starttime="20180614 14:16:35.728" />
                           </kw>
                           <kw name="Check_Status_Code" library="TemplatedRequests">
                              <doc>Log response text, check status_code is one of allowed ones.</doc>
                              <arguments>
                                 <arg>${response}</arg>
                                 <arg>additional_allowed_status_codes=${additional_allowed_status_codes}</arg>
                                 <arg>explicit_status_codes=${explicit_status_codes}</arg>
                              </arguments>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.745" level="INFO" />
                                 <status status="PASS" endtime="20180614 14:16:35.745" starttime="20180614 14:16:35.745" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.746" level="INFO">200</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.746" starttime="20180614 14:16:35.746" />
                              </kw>
                              <kw name="Run Keyword And Return If" library="BuiltIn">
                                 <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                 <arguments>
                                    <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                    <arg>Collections.List_Should_Contain_Value</arg>
                                    <arg>${explicit_status_codes}</arg>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:16:35.747" starttime="20180614 14:16:35.746" />
                              </kw>
                              <kw name="Combine Lists" library="Collections">
                                 <doc>Combines the given ``lists`` together and returns the result.</doc>
                                 <arguments>
                                    <arg>${ALLOWED_STATUS_CODES}</arg>
                                    <arg>${additional_allowed_status_codes}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${final_allowd_list}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:35.748" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.748" starttime="20180614 14:16:35.747" />
                              </kw>
                              <kw name="List Should Contain Value" library="Collections">
                                 <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                 <arguments>
                                    <arg>${final_allowd_list}</arg>
                                    <arg>${response.status_code}</arg>
                                 </arguments>
                                 <status status="PASS" endtime="20180614 14:16:35.749" starttime="20180614 14:16:35.748" />
                              </kw>
                              <status status="PASS" endtime="20180614 14:16:35.749" starttime="20180614 14:16:35.744" />
                           </kw>
                           <kw name="Run Keyword Unless" library="BuiltIn">
                              <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                              <arguments>
                                 <arg>${normalize_json}</arg>
                                 <arg>BuiltIn.Return_From_Keyword</arg>
                                 <arg>${response.text}</arg>
                              </arguments>
                              <status status="PASS" endtime="20180614 14:16:35.749" starttime="20180614 14:16:35.749" />
                           </kw>
                           <kw name="Normalize Json Text" library="norm_json">
                              <doc>Attempt to return sorted indented JSON string.</doc>
                              <arguments>
                                 <arg>${response.text}</arg>
                                 <arg>jmes_path=${jmes_path}</arg>
                              </arguments>
                              <assign>
                                 <var>${text_normalized}</var>
                              </assign>
                              <msg timestamp="20180614 14:16:35.750" level="INFO">${text_normalized} =</msg>
                              <status status="PASS" endtime="20180614 14:16:35.750" starttime="20180614 14:16:35.750" />
                           </kw>
                           <msg timestamp="20180614 14:16:35.751" level="INFO">${response_text} =</msg>
                           <status status="PASS" endtime="20180614 14:16:35.751" starttime="20180614 14:16:35.720" />
                        </kw>
                        <msg timestamp="20180614 14:16:35.751" level="INFO">${response_text} =</msg>
                        <status status="PASS" endtime="20180614 14:16:35.751" starttime="20180614 14:16:35.719" />
                     </kw>
                     <msg timestamp="20180614 14:16:35.751" level="INFO">${resp} =</msg>
                     <status status="PASS" endtime="20180614 14:16:35.751" starttime="20180614 14:16:35.703" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:35.751" starttime="20180614 14:16:35.695" />
               </kw>
               <kw name="Wait Until Write Finishes" library="BulkomaticKeywords">
                  <doc>Wait Until Write operation status is OK in member 1.</doc>
                  <arguments>
                     <arg>${controller_index}</arg>
                     <arg>${timeout}</arg>
                  </arguments>
                  <kw name="Wait Until Keyword Succeeds" library="BuiltIn">
                     <doc>Runs the specified keyword and retries if it fails.</doc>
                     <arguments>
                        <arg>${timeout}</arg>
                        <arg>1s</arg>
                        <arg>BulkomaticKeywords.Operation Status Check</arg>
                        <arg>${jolokia_write_op_status}</arg>
                        <arg>${controller_index}</arg>
                     </arguments>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:35.763" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.763" starttime="20180614 14:16:35.763" />
                              </kw>
                              <msg timestamp="20180614 14:16:35.763" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:35.763" starttime="20180614 14:16:35.762" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.765" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.765" starttime="20180614 14:16:35.765" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:35.766" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.766" starttime="20180614 14:16:35.766" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:35.778" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:35.778" starttime="20180614 14:16:35.767" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:35.778" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:35.779" starttime="20180614 14:16:35.766" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:35.781" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985795,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:35.781" starttime="20180614 14:16:35.780" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:35.782" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:35.782" starttime="20180614 14:16:35.781" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:35.783" starttime="20180614 14:16:35.782" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:35.783" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:35.783" starttime="20180614 14:16:35.783" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:35.784" starttime="20180614 14:16:35.784" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:35.784" starttime="20180614 14:16:35.779" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:35.785" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:35.785" starttime="20180614 14:16:35.785" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:35.786" starttime="20180614 14:16:35.785" />
                              </kw>
                              <msg timestamp="20180614 14:16:35.786" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985795,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:35.786" starttime="20180614 14:16:35.764" />
                           </kw>
                           <msg timestamp="20180614 14:16:35.786" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985795,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:35.786" starttime="20180614 14:16:35.761" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:35.787" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":1,"timestamp":1528985795,"status":200}</msg>
                           <msg timestamp="20180614 14:16:35.787" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:35.787" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985795, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:35.787" starttime="20180614 14:16:35.787" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:35.788" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:35.788" starttime="20180614 14:16:35.788" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:35.789" level="INFO">${value} = 1</msg>
                           <status status="PASS" endtime="20180614 14:16:35.789" starttime="20180614 14:16:35.788" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:35.790" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:35.790" starttime="20180614 14:16:35.789" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:35.790" level="FAIL">'1' does not start with '2'</msg>
                           <status status="FAIL" endtime="20180614 14:16:35.791" starttime="20180614 14:16:35.790" />
                        </kw>
                        <status status="FAIL" endtime="20180614 14:16:35.791" starttime="20180614 14:16:35.753" />
                     </kw>
                     <kw name="Operation Status Check" library="BulkomaticKeywords">
                        <doc>Checks to see if read or write operation is successfull in controller node.</doc>
                        <arguments>
                           <arg>${jolokia_write_op_status}</arg>
                           <arg>${controller_index}</arg>
                        </arguments>
                        <kw name="Get_From_Member" library="ClusterManagement">
                           <doc>Send a GET with the supplied uri to member ${member_index}.</doc>
                           <arguments>
                              <arg>${op_status_uri}</arg>
                              <arg>${controller_index}</arg>
                           </arguments>
                           <assign>
                              <var>${data}</var>
                           </assign>
                           <kw name="Resolve_Http_Session_For_Member" library="ClusterManagement">
                              <doc>Return RequestsLibrary session alias pointing to node of given index.</doc>
                              <arguments>
                                 <arg>member_index=${member_index}</arg>
                              </arguments>
                              <assign>
                                 <var>${session}</var>
                              </assign>
                              <kw name="Set Variable" library="BuiltIn">
                                 <doc>Returns the given values which can then be assigned to a variables.</doc>
                                 <arguments>
                                    <arg>ClusterManagement__session_${member_index}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${session}</var>
                                 </assign>
                                 <msg timestamp="20180614 14:16:36.802" level="INFO">${session} = ClusterManagement__session_1</msg>
                                 <status status="PASS" endtime="20180614 14:16:36.802" starttime="20180614 14:16:36.801" />
                              </kw>
                              <msg timestamp="20180614 14:16:36.802" level="INFO">${session} = ClusterManagement__session_1</msg>
                              <status status="PASS" endtime="20180614 14:16:36.802" starttime="20180614 14:16:36.800" />
                           </kw>
                           <kw name="Get_From_Uri" library="TemplatedRequests">
                              <doc>GET data from given URI, check status code and return response text.</doc>
                              <arguments>
                                 <arg>uri=${uri}</arg>
                                 <arg>accept=${access}</arg>
                                 <arg>session=${session}</arg>
                              </arguments>
                              <assign>
                                 <var>${response_text}</var>
                              </assign>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${uri}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:36.804" level="INFO">/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus</msg>
                                 <status status="PASS" endtime="20180614 14:16:36.804" starttime="20180614 14:16:36.804" />
                              </kw>
                              <kw name="Log" library="BuiltIn">
                                 <doc>Logs the given message with the given level.</doc>
                                 <arguments>
                                    <arg>${accept}</arg>
                                 </arguments>
                                 <msg timestamp="20180614 14:16:36.805" level="INFO">{}</msg>
                                 <status status="PASS" endtime="20180614 14:16:36.805" starttime="20180614 14:16:36.804" />
                              </kw>
                              <kw name="Run Keyword If" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
                                 <arguments>
                                    <arg>"""${http_timeout}""" == """${EMPTY}"""</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>ELSE</arg>
                                    <arg>RequestsLibrary.Get_Request</arg>
                                    <arg>alias=${session}</arg>
                                    <arg>uri=${uri}</arg>
                                    <arg>headers=${accept}</arg>
                                    <arg>timeout=${http_timeout}</arg>
                                 </arguments>
                                 <assign>
                                    <var>${response}</var>
                                 </assign>
                                 <kw name="Get Request" library="RequestsLibrary">
                                    <doc>Send a GET request on the session object found using the</doc>
                                    <arguments>
                                       <arg>alias=${session}</arg>
                                       <arg>uri=${uri}</arg>
                                       <arg>headers=${accept}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:36.810" level="INFO">Get Request using : alias=ClusterManagement__session_1, uri=/jolokia/read/org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter/WriteOpStatus, headers={} json=None</msg>
                                    <status status="PASS" endtime="20180614 14:16:36.810" starttime="20180614 14:16:36.806" />
                                 </kw>
                                 <msg timestamp="20180614 14:16:36.811" level="INFO">${response} = &lt;Response [200]&gt;</msg>
                                 <status status="PASS" endtime="20180614 14:16:36.811" starttime="20180614 14:16:36.805" />
                              </kw>
                              <kw name="Check_Status_Code" library="TemplatedRequests">
                                 <doc>Log response text, check status_code is one of allowed ones.</doc>
                                 <arguments>
                                    <arg>${response}</arg>
                                 </arguments>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:36.812" level="INFO">{"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985796,"status":200}</msg>
                                    <status status="PASS" endtime="20180614 14:16:36.812" starttime="20180614 14:16:36.812" />
                                 </kw>
                                 <kw name="Log" library="BuiltIn">
                                    <doc>Logs the given message with the given level.</doc>
                                    <arguments>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:36.813" level="INFO">200</msg>
                                    <status status="PASS" endtime="20180614 14:16:36.813" starttime="20180614 14:16:36.813" />
                                 </kw>
                                 <kw name="Run Keyword And Return If" library="BuiltIn">
                                    <doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>"""${explicit_status_codes}""" != """${NO_STATUS_CODES}"""</arg>
                                       <arg>Collections.List_Should_Contain_Value</arg>
                                       <arg>${explicit_status_codes}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:36.814" starttime="20180614 14:16:36.814" />
                                 </kw>
                                 <kw name="Combine Lists" library="Collections">
                                    <doc>Combines the given ``lists`` together and returns the result.</doc>
                                    <arguments>
                                       <arg>${ALLOWED_STATUS_CODES}</arg>
                                       <arg>${additional_allowed_status_codes}</arg>
                                    </arguments>
                                    <assign>
                                       <var>${final_allowd_list}</var>
                                    </assign>
                                    <msg timestamp="20180614 14:16:36.815" level="INFO">${final_allowd_list} = [200, 201, 204]</msg>
                                    <status status="PASS" endtime="20180614 14:16:36.815" starttime="20180614 14:16:36.814" />
                                 </kw>
                                 <kw name="List Should Contain Value" library="Collections">
                                    <doc>Fails if the ``value`` is not found from ``list``.</doc>
                                    <arguments>
                                       <arg>${final_allowd_list}</arg>
                                       <arg>${response.status_code}</arg>
                                    </arguments>
                                    <status status="PASS" endtime="20180614 14:16:36.816" starttime="20180614 14:16:36.816" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:36.816" starttime="20180614 14:16:36.811" />
                              </kw>
                              <kw name="Run Keyword Unless" library="BuiltIn">
                                 <doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
                                 <arguments>
                                    <arg>${normalize_json}</arg>
                                    <arg>BuiltIn.Return_From_Keyword</arg>
                                    <arg>${response.text}</arg>
                                 </arguments>
                                 <kw name="Return From Keyword" library="BuiltIn">
                                    <doc>Returns from the enclosing user keyword.</doc>
                                    <arguments>
                                       <arg>${response.text}</arg>
                                    </arguments>
                                    <msg timestamp="20180614 14:16:36.817" level="INFO">Returning from the enclosing user keyword.</msg>
                                    <status status="PASS" endtime="20180614 14:16:36.817" starttime="20180614 14:16:36.817" />
                                 </kw>
                                 <status status="PASS" endtime="20180614 14:16:36.818" starttime="20180614 14:16:36.817" />
                              </kw>
                              <msg timestamp="20180614 14:16:36.818" level="INFO">${response_text} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985796,"status":200}</msg>
                              <status status="PASS" endtime="20180614 14:16:36.818" starttime="20180614 14:16:36.802" />
                           </kw>
                           <msg timestamp="20180614 14:16:36.818" level="INFO">${data} = {"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985796,"status":200}</msg>
                           <status status="PASS" endtime="20180614 14:16:36.818" starttime="20180614 14:16:36.799" />
                        </kw>
                        <kw name="To Json" library="RequestsLibrary">
                           <doc>Convert a string to a JSON object</doc>
                           <arguments>
                              <arg>${data}</arg>
                           </arguments>
                           <assign>
                              <var>${json}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:36.819" level="INFO">To JSON using : content={"request":{"mbean":"org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter","attribute":"WriteOpStatus","type":"read"},"value":2,"timestamp":1528985796,"status":200}</msg>
                           <msg timestamp="20180614 14:16:36.819" level="INFO">To JSON using : pretty_print=False</msg>
                           <msg timestamp="20180614 14:16:36.819" level="INFO">${json} = {u'status': 200, u'timestamp': 1528985796, u'request': {u'attribute': u'WriteOpStatus', u'type': u'read', u'mbean': u'org.opendaylight.openflowplugin.applications.bulk.o.matic:type=FlowCounter'}, u'va...</msg>
                           <status status="PASS" endtime="20180614 14:16:36.819" starttime="20180614 14:16:36.819" />
                        </kw>
                        <kw name="Get From Dictionary" library="Collections">
                           <doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
                           <arguments>
                              <arg>${json}</arg>
                              <arg>value</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:36.820" level="INFO">${value} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:36.820" starttime="20180614 14:16:36.820" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>${value}</arg>
                           </arguments>
                           <assign>
                              <var>${value}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:36.821" level="INFO">${value} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:36.821" starttime="20180614 14:16:36.820" />
                        </kw>
                        <kw name="Convert To String" library="BuiltIn">
                           <doc>Converts the given item to a Unicode string.</doc>
                           <arguments>
                              <arg>2</arg>
                           </arguments>
                           <assign>
                              <var>${two}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:36.822" level="INFO">${two} = 2</msg>
                           <status status="PASS" endtime="20180614 14:16:36.822" starttime="20180614 14:16:36.821" />
                        </kw>
                        <kw name="Should Start With" library="BuiltIn">
                           <doc>Fails if the string ``str1`` does not start with the string ``str2``.</doc>
                           <arguments>
                              <arg>${value}</arg>
                              <arg>${two}</arg>
                           </arguments>
                           <status status="PASS" endtime="20180614 14:16:36.822" starttime="20180614 14:16:36.822" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:16:36.822" starttime="20180614 14:16:36.791" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:16:36.823" starttime="20180614 14:16:35.753" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:36.823" starttime="20180614 14:16:35.752" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:36.823" starttime="20180614 14:16:35.694" />
            </kw>
            <kw name="Get Current Date" library="DateTime">
               <doc>Returns current local or UTC time with an optional increment.</doc>
               <arguments>
                  <arg>result_format=timestamp</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_delete_end_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:36.824" level="INFO">${config_datastore_delete_end_time} = 2018-06-14 14:16:36.823</msg>
               <status status="PASS" endtime="20180614 14:16:36.824" starttime="20180614 14:16:36.823" />
            </kw>
            <kw name="Subtract Date From Date" library="DateTime">
               <doc>Subtracts date from another date and returns time between.</doc>
               <arguments>
                  <arg>${config_datastore_delete_end_time}</arg>
                  <arg>${config_datastore_delete_start_time}</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_delete_time}</var>
               </assign>
               <msg timestamp="20180614 14:16:36.825" level="INFO">${config_datastore_delete_time} = 1.137</msg>
               <status status="PASS" endtime="20180614 14:16:36.825" starttime="20180614 14:16:36.824" />
            </kw>
            <kw name="Evaluate" library="BuiltIn">
               <doc>Evaluates the given expression in Python and returns the results.</doc>
               <arguments>
                  <arg>${flow_count_after_add} / ${config_datastore_delete_time}</arg>
               </arguments>
               <assign>
                  <var>${config_datastore_delete_rate}</var>
               </assign>
               <msg timestamp="20180614 14:16:36.826" level="INFO">${config_datastore_delete_rate} = 87950.7475814</msg>
               <status status="PASS" endtime="20180614 14:16:36.826" starttime="20180614 14:16:36.825" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>${
}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:36.826" starttime="20180614 14:16:36.826" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The config_datastore_delete_time is ${config_datastore_delete_time}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:36.827" starttime="20180614 14:16:36.827" />
            </kw>
            <kw name="Log To Console" library="BuiltIn">
               <doc>Logs the given message to the console.</doc>
               <arguments>
                  <arg>The config_datastore_delete_rate is ${config_datastore_delete_rate}</arg>
               </arguments>
               <status status="PASS" endtime="20180614 14:16:36.828" starttime="20180614 14:16:36.827" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${config_datastore_delete_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.829" level="INFO">${config_datastore_delete_time} = 1.137</msg>
               <status status="PASS" endtime="20180614 14:16:36.829" starttime="20180614 14:16:36.828" />
            </kw>
            <kw name="Set Suite Variable" library="BuiltIn">
               <doc>Makes a variable available everywhere within the scope of the current suite.</doc>
               <arguments>
                  <arg>${config_datastore_delete_rate}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.829" level="INFO">${config_datastore_delete_rate} = 87950.7475814</msg>
               <status status="PASS" endtime="20180614 14:16:36.829" starttime="20180614 14:16:36.829" />
            </kw>
            <doc>100K Flows deleted and verify.</doc>
            <status status="PASS" endtime="20180614 14:16:36.830" critical="no" starttime="20180614 14:16:35.684" />
         </test>
         <test id="s1-s1-t8" name="Log Results And Determine Status">
            <kw name="Append To File" library="OperatingSystem">
               <doc>Appends the given content to the specified file.</doc>
               <arguments>
                  <arg>${rate_results_file}</arg>
                  <arg>Config DS,OVS Switch,Operational DS</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.831" html="yes" level="INFO">Appended to file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/rate.csv"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/rate.csv&lt;/a&gt;'.</msg>
               <status status="PASS" endtime="20180614 14:16:36.832" starttime="20180614 14:16:36.831" />
            </kw>
            <kw name="Append To File" library="OperatingSystem">
               <doc>Appends the given content to the specified file.</doc>
               <arguments>
                  <arg>${rate_results_file}</arg>
                  <arg>${config_datastore_write_rate},${Mininet_write_rate},${oper_datastore_write_rate}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/rate.csv"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/rate.csv&lt;/a&gt;'.</msg>
               <status status="PASS" endtime="20180614 14:16:36.833" starttime="20180614 14:16:36.832" />
            </kw>
            <kw name="Append To File" library="OperatingSystem">
               <doc>Appends the given content to the specified file.</doc>
               <arguments>
                  <arg>${time_results_file}</arg>
                  <arg>Config DS,OVS Switch,Operational DS</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.833" html="yes" level="INFO">Appended to file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/time.csv"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/time.csv&lt;/a&gt;'.</msg>
               <status status="PASS" endtime="20180614 14:16:36.834" starttime="20180614 14:16:36.833" />
            </kw>
            <kw name="Append To File" library="OperatingSystem">
               <doc>Appends the given content to the specified file.</doc>
               <arguments>
                  <arg>${time_results_file}</arg>
                  <arg>${config_datastore_write_time},${Mininet_write_time},${oper_datastore_write_time}</arg>
               </arguments>
               <msg timestamp="20180614 14:16:36.835" html="yes" level="INFO">Appended to file '&lt;a href="file:///w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/time.csv"&gt;/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/time.csv&lt;/a&gt;'.</msg>
               <status status="PASS" endtime="20180614 14:16:36.835" starttime="20180614 14:16:36.834" />
            </kw>
            <doc>Log results for plotting.</doc>
            <status status="PASS" endtime="20180614 14:16:36.835" critical="no" starttime="20180614 14:16:36.830" />
         </test>
         <kw type="teardown" name="Delete All Sessions" library="RequestsLibrary">
            <doc>Removes all the session objects</doc>
            <msg timestamp="20180614 14:16:36.837" level="INFO">Delete All Sessions</msg>
            <status status="PASS" endtime="20180614 14:16:36.837" starttime="20180614 14:16:36.836" />
         </kw>
         <doc>Test suite for 3Node Cluster - 100K flows and 10 DPNs in Cluster Scale Up scenario</doc>
         <status status="PASS" endtime="20180614 14:16:36.837" starttime="20180614 14:15:35.331" />
      </suite>
      <suite source="/w/workspace/openflowplugin-csit-1node-perf-bulkomatic-only-oxygen/test/csit/suites/integration/Create_JVM_Plots.robot" id="s1-s2" name="Create JVM Plots">
         <test id="s1-s2-t1" name="Create JVM Plots">
            <kw name="Run Keyword And Ignore Error" library="BuiltIn">
               <doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
               <arguments>
                  <arg>CheckJVMResource.Create JVM Plots</arg>
               </arguments>
               <kw name="Create JVM Plots" library="CheckJVMResource">
                  <doc>Draw Resource usage plot using plot_points method.</doc>
                  <kw type="for" name="${index} IN RANGE [ 1 | ${controllers_number}+1 ]">
                     <kw type="foritem" name="${index} = 1">
                        <kw name="Set Variable" library="BuiltIn">
                           <doc>Returns the given values which can then be assigned to a variables.</doc>
                           <arguments>
                              <arg>${ODL_SYSTEM_${index}_IP}</arg>
                           </arguments>
                           <assign>
                              <var>${controller-ip}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:37.290" level="INFO">${controller-ip} = 10.30.170.13</msg>
                           <status status="PASS" endtime="20180614 14:16:37.290" starttime="20180614 14:16:37.289" />
                        </kw>
                        <kw name="Log" library="BuiltIn">
                           <doc>Logs the given message with the given level.</doc>
                           <arguments>
                              <arg>${controller-ip}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:37.290" level="INFO">10.30.170.13</msg>
                           <status status="PASS" endtime="20180614 14:16:37.291" starttime="20180614 14:16:37.290" />
                        </kw>
                        <kw name="Get Connection" library="ElasticsearchAppender">
                           <arguments>
                              <arg>${controller-ip}</arg>
                              <arg>${elastic-port}</arg>
                           </arguments>
                           <assign>
                              <var>${session}</var>
                           </assign>
                           <msg timestamp="20180614 14:16:37.291" level="INFO">${session} = &lt;Elasticsearch([{'host': '10.30.170.13', 'port': '9200'}])&gt;</msg>
                           <status status="PASS" endtime="20180614 14:16:37.291" starttime="20180614 14:16:37.291" />
                        </kw>
                        <kw name="Log" library="BuiltIn">
                           <doc>Logs the given message with the given level.</doc>
                           <arguments>
                              <arg>${session}</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:37.292" level="INFO">&lt;Elasticsearch([{'host': '10.30.170.13', 'port': '9200'}])&gt;</msg>
                           <status status="PASS" endtime="20180614 14:16:37.292" starttime="20180614 14:16:37.292" />
                        </kw>
                        <kw name="Plot Points" library="ElasticsearchAppender">
                           <arguments>
                              <arg>${session}</arg>
                              <arg>JVM Threads</arg>
                              <arg>threadcount_${index}.png</arg>
                              <arg>'Threading'</arg>
                              <arg>'ThreadCount'</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:37.546" level="INFO">GET http://10.30.170.13:9200/_mapping [status:200 request:0.038s]</msg>
                           <msg timestamp="20180614 14:16:37.591" level="INFO">GET http://10.30.170.13:9200/karaf-2018.06.14/_search?search_type=scan&amp;scroll=5m [status:200 request:0.045s]</msg>
                           <msg timestamp="20180614 14:16:37.614" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.022s]</msg>
                           <msg timestamp="20180614 14:16:37.619" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.002s]</msg>
                           <status status="PASS" endtime="20180614 14:16:38.407" starttime="20180614 14:16:37.292" />
                        </kw>
                        <kw name="Plot Points" library="ElasticsearchAppender">
                           <arguments>
                              <arg>${session}</arg>
                              <arg>JVM Heap Memory</arg>
                              <arg>heapmemory_${index}.png</arg>
                              <arg>'Memory'</arg>
                              <arg>'HeapMemoryUsage'</arg>
                              <arg>'used'</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:38.412" level="INFO">GET http://10.30.170.13:9200/_mapping [status:200 request:0.003s]</msg>
                           <msg timestamp="20180614 14:16:38.416" level="INFO">GET http://10.30.170.13:9200/karaf-2018.06.14/_search?search_type=scan&amp;scroll=5m [status:200 request:0.003s]</msg>
                           <msg timestamp="20180614 14:16:38.421" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.005s]</msg>
                           <msg timestamp="20180614 14:16:38.423" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.001s]</msg>
                           <status status="PASS" endtime="20180614 14:16:38.635" starttime="20180614 14:16:38.408" />
                        </kw>
                        <kw name="Plot Points" library="ElasticsearchAppender">
                           <arguments>
                              <arg>${session}</arg>
                              <arg>JVM Loaded Classes</arg>
                              <arg>class_count_${index}.png</arg>
                              <arg>'ClassLoading'</arg>
                              <arg>'TotalLoadedClassCount'</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:38.639" level="INFO">GET http://10.30.170.13:9200/_mapping [status:200 request:0.002s]</msg>
                           <msg timestamp="20180614 14:16:38.642" level="INFO">GET http://10.30.170.13:9200/karaf-2018.06.14/_search?search_type=scan&amp;scroll=5m [status:200 request:0.002s]</msg>
                           <msg timestamp="20180614 14:16:38.646" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.003s]</msg>
                           <msg timestamp="20180614 14:16:38.649" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.001s]</msg>
                           <status status="PASS" endtime="20180614 14:16:38.873" starttime="20180614 14:16:38.636" />
                        </kw>
                        <kw name="Plot Points" library="ElasticsearchAppender">
                           <arguments>
                              <arg>${session}</arg>
                              <arg>JVM CPU Usage</arg>
                              <arg>cpu_usage_${index}.png</arg>
                              <arg>'OperatingSystem'</arg>
                              <arg>'ProcessCpuLoad'</arg>
                           </arguments>
                           <msg timestamp="20180614 14:16:38.877" level="INFO">GET http://10.30.170.13:9200/_mapping [status:200 request:0.002s]</msg>
                           <msg timestamp="20180614 14:16:38.881" level="INFO">GET http://10.30.170.13:9200/karaf-2018.06.14/_search?search_type=scan&amp;scroll=5m [status:200 request:0.003s]</msg>
                           <msg timestamp="20180614 14:16:38.885" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.003s]</msg>
                           <msg timestamp="20180614 14:16:38.887" level="INFO">GET http://10.30.170.13:9200/_search/scroll?scroll=5m [status:200 request:0.001s]</msg>
                           <status status="PASS" endtime="20180614 14:16:39.118" starttime="20180614 14:16:38.874" />
                        </kw>
                        <status status="PASS" endtime="20180614 14:16:39.118" starttime="20180614 14:16:37.289" />
                     </kw>
                     <status status="PASS" endtime="20180614 14:16:39.118" starttime="20180614 14:16:37.289" />
                  </kw>
                  <status status="PASS" endtime="20180614 14:16:39.119" starttime="20180614 14:16:37.288" />
               </kw>
               <status status="PASS" endtime="20180614 14:16:39.119" starttime="20180614 14:16:37.288" />
            </kw>
            <status status="PASS" endtime="20180614 14:16:39.119" critical="no" starttime="20180614 14:16:37.287" />
         </test>
         <doc>Test suite to Plot JVM Resources</doc>
         <status status="PASS" endtime="20180614 14:16:39.120" starttime="20180614 14:16:36.841" />
      </suite>
      <status status="PASS" endtime="20180614 14:16:39.123" starttime="20180614 14:15:35.303" />
   </suite>
   <statistics>
      <total>
         <stat fail="0" pass="0">Critical Tests</stat>
         <stat fail="0" pass="9">All Tests</stat>
      </total>
      <tag>
         <stat info="critical" fail="0" pass="0">critical</stat>
      </tag>
      <suite>
         <stat fail="0" id="s1" name="openflowplugin-perf-bulkomatic.txt" pass="9">openflowplugin-perf-bulkomatic.txt</stat>
         <stat fail="0" id="s1-s1" name="100K Flows 100DPN 1Node Perf Test" pass="8">openflowplugin-perf-bulkomatic.txt.100K Flows 100DPN 1Node Perf Test</stat>
         <stat fail="0" id="s1-s2" name="Create JVM Plots" pass="1">openflowplugin-perf-bulkomatic.txt.Create JVM Plots</stat>
      </suite>
   </statistics>
   <errors />
</robot>
